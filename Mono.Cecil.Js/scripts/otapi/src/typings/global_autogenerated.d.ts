/** Auto generated by the Mono.Cecil.Js.TypingsGenerator tool **/

declare module dotnet {
	module Mono.Collections.Generic {
		class Collection<T> {
			Count: number;
			Item: any;
			Capacity: number;
			 constructor() ;
			 constructor(capacity: number) ;
			 constructor(items: any) ;
			 Add(item: T) : void;
			 Contains(item: T) : boolean;
			 IndexOf(item: T) : number;
			 Insert(index: number, item: T) : void;
			 RemoveAt(index: number) : void;
			 Remove(item: T) : boolean;
			 Clear() : void;
			 CopyTo(array: any, arrayIndex: number) : void;
			 ToArray() : any;
			 GetEnumerator() : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ReadOnlyCollection<T> {
			 constructor(array: any) ;
			 constructor(collection: any) ;
			 Add(item: T) : void;
			 Contains(item: T) : boolean;
			 IndexOf(item: T) : number;
			 Insert(index: number, item: T) : void;
			 RemoveAt(index: number) : void;
			 Remove(item: T) : boolean;
			 Clear() : void;
			 CopyTo(array: any, arrayIndex: number) : void;
			 ToArray() : any;
			 GetEnumerator() : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
	}
	module Mono.Cecil {
		class ArrayDimension extends System.ValueType {
			LowerBound: any;
			UpperBound: any;
			IsSized: boolean;
			 constructor(lowerBound: any, upperBound: any) ;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 GetType() : any;
		}
		class ArrayMarshalInfo extends Mono.Cecil.MarshalInfo {
			ElementType: any;
			SizeParameterIndex: number;
			Size: number;
			SizeParameterMultiplier: number;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ArrayType extends Mono.Cecil.TypeSpecification {
			Dimensions: any;
			Rank: number;
			IsVector: boolean;
			IsValueType: boolean;
			Name: string;
			FullName: string;
			IsArray: boolean;
			 constructor(type: any) ;
			 constructor(type: any, rank: number) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum AssemblyAttributes {
			PublicKey = 1,
			SideBySideCompatible = 0,
			Retargetable = 256,
			WindowsRuntime = 512,
			DisableJITCompileOptimizer = 16384,
			EnableJITCompileTracking = 32768,
		}
		class AssemblyDefinition {
			Name: any;
			FullName: string;
			MetadataToken: any;
			Modules: any;
			MainModule: any;
			EntryPoint: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			HasSecurityDeclarations: boolean;
			SecurityDeclarations: any;
			 Dispose() : void;
			 static CreateAssembly(assemblyName: any, moduleName: string, kind: any) : any;
			 static CreateAssembly(assemblyName: any, moduleName: string, parameters: any) : any;
			 static ReadAssembly(fileName: string) : any;
			 static ReadAssembly(fileName: string, parameters: any) : any;
			 static ReadAssembly(stream: any) : any;
			 static ReadAssembly(stream: any, parameters: any) : any;
			 Write(fileName: string) : void;
			 Write(fileName: string, parameters: any) : void;
			 Write() : void;
			 Write(parameters: any) : void;
			 Write(stream: any) : void;
			 Write(stream: any, parameters: any) : void;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum AssemblyHashAlgorithm {
			None = 0,
			Reserved = 32771,
			SHA1 = 32772,
		}
		class AssemblyLinkedResource extends Mono.Cecil.Resource {
			Assembly: any;
			ResourceType: any;
			 constructor(name: string, flags: any) ;
			 constructor(name: string, flags: any, reference: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class AssemblyNameDefinition extends Mono.Cecil.AssemblyNameReference {
			Hash: any;
			 constructor(name: string, version: any) ;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class AssemblyNameReference {
			Name: string;
			Culture: string;
			Version: any;
			Attributes: any;
			HasPublicKey: boolean;
			IsSideBySideCompatible: boolean;
			IsRetargetable: boolean;
			IsWindowsRuntime: boolean;
			PublicKey: any;
			PublicKeyToken: any;
			MetadataScopeType: any;
			FullName: string;
			HashAlgorithm: any;
			Hash: any;
			MetadataToken: any;
			 constructor(name: string, version: any) ;
			 static Parse(fullName: string) : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class AssemblyResolutionException extends System.IO.FileNotFoundException {
			AssemblyReference: any;
			 constructor(reference: any) ;
			 constructor(reference: any, innerException: any) ;
			 ToString() : string;
			 GetObjectData(info: any, context: any) : void;
			 GetBaseException() : any;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class AssemblyResolveEventArgs extends System.EventArgs {
			AssemblyReference: any;
			 constructor(reference: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class AssemblyResolveEventHandler extends System.MulticastDelegate {
			 constructor(object: any, method: any) ;
			 Invoke(sender: any, reference: any) : any;
			 BeginInvoke(sender: any, reference: any, callback: any, object: any) : any;
			 EndInvoke(result: any) : any;
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		abstract class BaseAssemblyResolver {
			 AddSearchDirectory(directory: string) : void;
			 RemoveSearchDirectory(directory: string) : void;
			 GetSearchDirectories() : string[];
			 add_ResolveFailure(value: any) : void;
			 remove_ResolveFailure(value: any) : void;
			 Resolve(name: any) : any;
			 Resolve(name: any, parameters: any) : any;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ByReferenceType extends Mono.Cecil.TypeSpecification {
			Name: string;
			FullName: string;
			IsValueType: boolean;
			IsByReference: boolean;
			 constructor(type: any) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class CallSite {
			HasThis: boolean;
			ExplicitThis: boolean;
			CallingConvention: any;
			HasParameters: boolean;
			Parameters: any;
			ReturnType: any;
			MethodReturnType: any;
			Name: string;
			Namespace: string;
			Module: any;
			Scope: any;
			MetadataToken: any;
			FullName: string;
			 constructor(returnType: any) ;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class CustomAttribute {
			Constructor: any;
			AttributeType: any;
			IsResolved: boolean;
			HasConstructorArguments: boolean;
			ConstructorArguments: any;
			HasFields: boolean;
			Fields: any;
			HasProperties: boolean;
			Properties: any;
			 constructor(constructor: any) ;
			 constructor(constructor: any, blob: any) ;
			 GetBlob() : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class CustomAttributeArgument extends System.ValueType {
			Type: any;
			Value: any;
			 constructor(type: any, value: any) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 ToString() : string;
			 GetType() : any;
		}
		class CustomAttributeNamedArgument extends System.ValueType {
			Name: string;
			Argument: any;
			 constructor(name: string, argument: any) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 ToString() : string;
			 GetType() : any;
		}
		class CustomMarshalInfo extends Mono.Cecil.MarshalInfo {
			Guid: any;
			UnmanagedType: string;
			ManagedType: any;
			Cookie: string;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class DefaultAssemblyResolver extends Mono.Cecil.BaseAssemblyResolver {
			 constructor() ;
			 Resolve(name: any) : any;
			 AddSearchDirectory(directory: string) : void;
			 RemoveSearchDirectory(directory: string) : void;
			 GetSearchDirectories() : string[];
			 add_ResolveFailure(value: any) : void;
			 remove_ResolveFailure(value: any) : void;
			 Resolve(name: any, parameters: any) : any;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class DefaultMetadataImporter {
			 constructor(module: any) ;
			 ImportReference(name: any) : any;
			 ImportReference(type: any, context: any) : any;
			 ImportReference(field: any, context: any) : any;
			 ImportReference(method: any, context: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class DefaultReflectionImporter {
			 constructor(module: any) ;
			 ImportReference(name: any) : any;
			 ImportReference(type: any, context: any) : any;
			 ImportReference(field: any, context: any) : any;
			 ImportReference(method: any, context: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class EmbeddedResource extends Mono.Cecil.Resource {
			ResourceType: any;
			 constructor(name: string, attributes: any, data: any) ;
			 constructor(name: string, attributes: any, stream: any) ;
			 GetResourceStream() : any;
			 GetResourceData() : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum EventAttributes {
			None = 0,
			SpecialName = 512,
			RTSpecialName = 1024,
		}
		class EventDefinition extends Mono.Cecil.EventReference {
			Attributes: any;
			AddMethod: any;
			InvokeMethod: any;
			RemoveMethod: any;
			HasOtherMethods: boolean;
			OtherMethods: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			IsSpecialName: boolean;
			IsRuntimeSpecialName: boolean;
			DeclaringType: any;
			IsDefinition: boolean;
			 constructor(name: string, attributes: any, eventType: any) ;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class EventReference extends Mono.Cecil.MemberReference {
			EventType: any;
			FullName: string;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ExportedType {
			Namespace: string;
			Name: string;
			Attributes: any;
			Scope: any;
			DeclaringType: any;
			MetadataToken: any;
			Identifier: number;
			IsNotPublic: boolean;
			IsPublic: boolean;
			IsNestedPublic: boolean;
			IsNestedPrivate: boolean;
			IsNestedFamily: boolean;
			IsNestedAssembly: boolean;
			IsNestedFamilyAndAssembly: boolean;
			IsNestedFamilyOrAssembly: boolean;
			IsAutoLayout: boolean;
			IsSequentialLayout: boolean;
			IsExplicitLayout: boolean;
			IsClass: boolean;
			IsInterface: boolean;
			IsAbstract: boolean;
			IsSealed: boolean;
			IsSpecialName: boolean;
			IsImport: boolean;
			IsSerializable: boolean;
			IsAnsiClass: boolean;
			IsUnicodeClass: boolean;
			IsAutoClass: boolean;
			IsBeforeFieldInit: boolean;
			IsRuntimeSpecialName: boolean;
			HasSecurity: boolean;
			IsForwarder: boolean;
			FullName: string;
			 constructor(namespace: string, name: string, module: any, scope: any) ;
			 ToString() : string;
			 Resolve() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum FieldAttributes {
			FieldAccessMask = 7,
			CompilerControlled = 0,
			Private = 1,
			FamANDAssem = 2,
			Assembly = 3,
			Family = 4,
			FamORAssem = 5,
			Public = 6,
			Static = 16,
			InitOnly = 32,
			Literal = 64,
			NotSerialized = 128,
			SpecialName = 512,
			PInvokeImpl = 8192,
			RTSpecialName = 1024,
			HasFieldMarshal = 4096,
			HasDefault = 32768,
			HasFieldRVA = 256,
		}
		class FieldDefinition extends Mono.Cecil.FieldReference {
			HasLayoutInfo: boolean;
			Offset: number;
			RVA: number;
			InitialValue: any;
			Attributes: any;
			HasConstant: boolean;
			Constant: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			HasMarshalInfo: boolean;
			MarshalInfo: any;
			IsCompilerControlled: boolean;
			IsPrivate: boolean;
			IsFamilyAndAssembly: boolean;
			IsAssembly: boolean;
			IsFamily: boolean;
			IsFamilyOrAssembly: boolean;
			IsPublic: boolean;
			IsStatic: boolean;
			IsInitOnly: boolean;
			IsLiteral: boolean;
			IsNotSerialized: boolean;
			IsSpecialName: boolean;
			IsPInvokeImpl: boolean;
			IsRuntimeSpecialName: boolean;
			HasDefault: boolean;
			IsDefinition: boolean;
			DeclaringType: any;
			 constructor(name: string, attributes: any, fieldType: any) ;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class FieldReference extends Mono.Cecil.MemberReference {
			FieldType: any;
			FullName: string;
			ContainsGenericParameter: boolean;
			 constructor(name: string, fieldType: any) ;
			 constructor(name: string, fieldType: any, declaringType: any) ;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class FixedArrayMarshalInfo extends Mono.Cecil.MarshalInfo {
			ElementType: any;
			Size: number;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class FixedSysStringMarshalInfo extends Mono.Cecil.MarshalInfo {
			Size: number;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class FunctionPointerType extends Mono.Cecil.TypeSpecification {
			HasThis: boolean;
			ExplicitThis: boolean;
			CallingConvention: any;
			HasParameters: boolean;
			Parameters: any;
			ReturnType: any;
			MethodReturnType: any;
			Name: string;
			Namespace: string;
			Module: any;
			Scope: any;
			IsFunctionPointer: boolean;
			ContainsGenericParameter: boolean;
			FullName: string;
			 constructor() ;
			 Resolve() : any;
			 GetElementType() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class GenericInstanceMethod extends Mono.Cecil.MethodSpecification {
			HasGenericArguments: boolean;
			GenericArguments: any;
			IsGenericInstance: boolean;
			ContainsGenericParameter: boolean;
			FullName: string;
			 constructor(method: any) ;
			 GetElementMethod() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class GenericInstanceType extends Mono.Cecil.TypeSpecification {
			HasGenericArguments: boolean;
			GenericArguments: any;
			DeclaringType: any;
			FullName: string;
			IsGenericInstance: boolean;
			ContainsGenericParameter: boolean;
			 constructor(type: any) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class GenericParameter extends Mono.Cecil.TypeReference {
			Attributes: any;
			Position: number;
			Type: any;
			Owner: any;
			HasConstraints: boolean;
			Constraints: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			Scope: any;
			DeclaringType: any;
			DeclaringMethod: any;
			Module: any;
			Name: string;
			Namespace: string;
			FullName: string;
			IsGenericParameter: boolean;
			ContainsGenericParameter: boolean;
			MetadataType: any;
			IsNonVariant: boolean;
			IsCovariant: boolean;
			IsContravariant: boolean;
			HasReferenceTypeConstraint: boolean;
			HasNotNullableValueTypeConstraint: boolean;
			HasDefaultConstructorConstraint: boolean;
			 constructor(owner: any) ;
			 constructor(name: string, owner: any) ;
			 Resolve() : any;
			 GetElementType() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum GenericParameterAttributes {
			VarianceMask = 3,
			NonVariant = 0,
			Covariant = 1,
			Contravariant = 2,
			SpecialConstraintMask = 28,
			ReferenceTypeConstraint = 4,
			NotNullableValueTypeConstraint = 8,
			DefaultConstructorConstraint = 16,
		}
		class GenericParameterConstraint {
			ConstraintType: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			MetadataToken: any;
			 constructor(constraintType: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum GenericParameterType {
			Type = 0,
			Method = 1,
		}
		interface IAssemblyResolver {
			 Resolve(name: any) : any;
			 Resolve(name: any, parameters: any) : any;
		}
		interface IConstantProvider {
			HasConstant: boolean;
			Constant: any;
		}
		interface ICustomAttribute {
			AttributeType: any;
			HasFields: boolean;
			HasProperties: boolean;
			HasConstructorArguments: boolean;
			Fields: any;
			Properties: any;
			ConstructorArguments: any;
		}
		interface ICustomAttributeProvider {
			CustomAttributes: any;
			HasCustomAttributes: boolean;
		}
		interface IGenericInstance {
			HasGenericArguments: boolean;
			GenericArguments: any;
		}
		interface IGenericParameterProvider {
			HasGenericParameters: boolean;
			IsDefinition: boolean;
			Module: any;
			GenericParameters: any;
			GenericParameterType: any;
		}
		interface IMarshalInfoProvider {
			HasMarshalInfo: boolean;
			MarshalInfo: any;
		}
		interface IMemberDefinition {
			Name: string;
			FullName: string;
			IsSpecialName: boolean;
			IsRuntimeSpecialName: boolean;
			DeclaringType: any;
		}
		interface IMetadataImporter {
			 ImportReference(reference: any) : any;
			 ImportReference(type: any, context: any) : any;
			 ImportReference(field: any, context: any) : any;
			 ImportReference(method: any, context: any) : any;
		}
		interface IMetadataImporterProvider {
			 GetMetadataImporter(module: any) : any;
		}
		interface IMetadataResolver {
			 Resolve(type: any) : any;
			 Resolve(field: any) : any;
			 Resolve(method: any) : any;
		}
		interface IMetadataScope {
			MetadataScopeType: any;
			Name: string;
		}
		interface IMetadataTokenProvider {
			MetadataToken: any;
		}
		interface IMethodSignature {
			HasThis: boolean;
			ExplicitThis: boolean;
			CallingConvention: any;
			HasParameters: boolean;
			Parameters: any;
			ReturnType: any;
			MethodReturnType: any;
		}
		interface IModifierType {
			ModifierType: any;
			ElementType: any;
		}
		class InterfaceImplementation {
			InterfaceType: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			MetadataToken: any;
			 constructor(interfaceType: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		interface IReflectionImporter {
			 ImportReference(reference: any) : any;
			 ImportReference(type: any, context: any) : any;
			 ImportReference(field: any, context: any) : any;
			 ImportReference(method: any, context: any) : any;
		}
		interface IReflectionImporterProvider {
			 GetReflectionImporter(module: any) : any;
		}
		interface ISecurityDeclarationProvider {
			HasSecurityDeclarations: boolean;
			SecurityDeclarations: any;
		}
		class LinkedResource extends Mono.Cecil.Resource {
			Hash: any;
			File: string;
			ResourceType: any;
			 constructor(name: string, flags: any) ;
			 constructor(name: string, flags: any, file: string) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum ManifestResourceAttributes {
			VisibilityMask = 7,
			Public = 1,
			Private = 2,
		}
		class MarshalInfo {
			NativeType: any;
			 constructor(native: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class MemberReference {
			Name: string;
			FullName: string;
			DeclaringType: any;
			MetadataToken: any;
			IsWindowsRuntimeProjection: boolean;
			Module: any;
			IsDefinition: boolean;
			ContainsGenericParameter: boolean;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum MetadataKind {
			Ecma335 = 0,
			WindowsMetadata = 1,
			ManagedWindowsMetadata = 2,
		}
		class MetadataResolver {
			AssemblyResolver: any;
			 constructor(assemblyResolver: any) ;
			 Resolve(type: any) : any;
			 Resolve(field: any) : any;
			 Resolve(method: any) : any;
			 static GetMethod(methods: any, reference: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum MetadataScopeType {
			AssemblyNameReference = 0,
			ModuleReference = 1,
			ModuleDefinition = 2,
		}
		class MetadataToken extends System.ValueType {
			RID: any;
			TokenType: any;
			 constructor(token: any) ;
			 constructor(type: any) ;
			 constructor(type: any, rid: any) ;
			 constructor(type: any, rid: number) ;
			 ToInt32() : number;
			 ToUInt32() : any;
			 GetHashCode() : number;
			 Equals(other: any) : boolean;
			 Equals(obj: any) : boolean;
			 static op_Equality(one: any, other: any) : boolean;
			 static op_Inequality(one: any, other: any) : boolean;
			 ToString() : string;
			 GetType() : any;
		}
		enum MetadataType {
			Void = 1,
			Boolean = 2,
			Char = 3,
			SByte = 4,
			Byte = 5,
			Int16 = 6,
			UInt16 = 7,
			Int32 = 8,
			UInt32 = 9,
			Int64 = 10,
			UInt64 = 11,
			Single = 12,
			Double = 13,
			String = 14,
			Pointer = 15,
			ByReference = 16,
			ValueType = 17,
			Class = 18,
			Var = 19,
			Array = 20,
			GenericInstance = 21,
			TypedByReference = 22,
			IntPtr = 24,
			UIntPtr = 25,
			FunctionPointer = 27,
			Object = 28,
			MVar = 30,
			RequiredModifier = 31,
			OptionalModifier = 32,
			Sentinel = 65,
			Pinned = 69,
		}
		/** Flags */
		enum MethodAttributes {
			MemberAccessMask = 7,
			CompilerControlled = 0,
			Private = 1,
			FamANDAssem = 2,
			Assembly = 3,
			Family = 4,
			FamORAssem = 5,
			Public = 6,
			Static = 16,
			Final = 32,
			Virtual = 64,
			HideBySig = 128,
			VtableLayoutMask = 256,
			ReuseSlot = 0,
			NewSlot = 256,
			CheckAccessOnOverride = 512,
			Abstract = 1024,
			SpecialName = 2048,
			PInvokeImpl = 8192,
			UnmanagedExport = 8,
			RTSpecialName = 4096,
			HasSecurity = 16384,
			RequireSecObject = 32768,
		}
		enum MethodCallingConvention {
			Default = 0,
			C = 1,
			StdCall = 2,
			ThisCall = 3,
			FastCall = 4,
			VarArg = 5,
			Generic = 16,
		}
		class MethodDefinition extends Mono.Cecil.MethodReference {
			Name: string;
			Attributes: any;
			ImplAttributes: any;
			SemanticsAttributes: any;
			HasSecurityDeclarations: boolean;
			SecurityDeclarations: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			RVA: number;
			HasBody: boolean;
			Body: any;
			DebugInformation: any;
			HasPInvokeInfo: boolean;
			PInvokeInfo: any;
			HasOverrides: boolean;
			Overrides: any;
			HasGenericParameters: boolean;
			GenericParameters: any;
			HasCustomDebugInformations: boolean;
			CustomDebugInformations: any;
			IsCompilerControlled: boolean;
			IsPrivate: boolean;
			IsFamilyAndAssembly: boolean;
			IsAssembly: boolean;
			IsFamily: boolean;
			IsFamilyOrAssembly: boolean;
			IsPublic: boolean;
			IsStatic: boolean;
			IsFinal: boolean;
			IsVirtual: boolean;
			IsHideBySig: boolean;
			IsReuseSlot: boolean;
			IsNewSlot: boolean;
			IsCheckAccessOnOverride: boolean;
			IsAbstract: boolean;
			IsSpecialName: boolean;
			IsPInvokeImpl: boolean;
			IsUnmanagedExport: boolean;
			IsRuntimeSpecialName: boolean;
			HasSecurity: boolean;
			IsIL: boolean;
			IsNative: boolean;
			IsRuntime: boolean;
			IsUnmanaged: boolean;
			IsManaged: boolean;
			IsForwardRef: boolean;
			IsPreserveSig: boolean;
			IsInternalCall: boolean;
			IsSynchronized: boolean;
			NoInlining: boolean;
			NoOptimization: boolean;
			AggressiveInlining: boolean;
			IsSetter: boolean;
			IsGetter: boolean;
			IsOther: boolean;
			IsAddOn: boolean;
			IsRemoveOn: boolean;
			IsFire: boolean;
			DeclaringType: any;
			IsConstructor: boolean;
			IsDefinition: boolean;
			 constructor(name: string, attributes: any, returnType: any) ;
			 Resolve() : any;
			 GetElementMethod() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum MethodImplAttributes {
			CodeTypeMask = 3,
			IL = 0,
			Native = 1,
			OPTIL = 2,
			Runtime = 3,
			ManagedMask = 4,
			Unmanaged = 4,
			Managed = 0,
			ForwardRef = 16,
			PreserveSig = 128,
			InternalCall = 4096,
			Synchronized = 32,
			NoOptimization = 64,
			NoInlining = 8,
			AggressiveInlining = 256,
		}
		class MethodReference extends Mono.Cecil.MemberReference {
			HasThis: boolean;
			ExplicitThis: boolean;
			CallingConvention: any;
			HasParameters: boolean;
			Parameters: any;
			HasGenericParameters: boolean;
			GenericParameters: any;
			ReturnType: any;
			MethodReturnType: any;
			FullName: string;
			IsGenericInstance: boolean;
			ContainsGenericParameter: boolean;
			 constructor(name: string, returnType: any) ;
			 constructor(name: string, returnType: any, declaringType: any) ;
			 GetElementMethod() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class MethodReturnType {
			Method: any;
			ReturnType: any;
			MetadataToken: any;
			Attributes: any;
			Name: string;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			HasDefault: boolean;
			HasConstant: boolean;
			Constant: any;
			HasFieldMarshal: boolean;
			HasMarshalInfo: boolean;
			MarshalInfo: any;
			 constructor(method: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum MethodSemanticsAttributes {
			None = 0,
			Setter = 1,
			Getter = 2,
			Other = 4,
			AddOn = 8,
			RemoveOn = 16,
			Fire = 32,
		}
		abstract class MethodSpecification extends Mono.Cecil.MethodReference {
			ElementMethod: any;
			Name: string;
			CallingConvention: any;
			HasThis: boolean;
			ExplicitThis: boolean;
			MethodReturnType: any;
			DeclaringType: any;
			Module: any;
			HasParameters: boolean;
			Parameters: any;
			ContainsGenericParameter: boolean;
			 GetElementMethod() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum ModuleAttributes {
			ILOnly = 1,
			Required32Bit = 2,
			ILLibrary = 4,
			StrongNameSigned = 8,
			Preferred32Bit = 131072,
		}
		/** Flags */
		enum ModuleCharacteristics {
			HighEntropyVA = 32,
			DynamicBase = 64,
			NoSEH = 1024,
			NXCompat = 256,
			AppContainer = 4096,
			TerminalServerAware = 32768,
		}
		class ModuleDefinition extends Mono.Cecil.ModuleReference {
			IsMain: boolean;
			Kind: any;
			MetadataKind: any;
			Runtime: any;
			RuntimeVersion: string;
			Architecture: any;
			Attributes: any;
			Characteristics: any;
			FullyQualifiedName: string;
			FileName: string;
			Mvid: any;
			HasSymbols: boolean;
			SymbolReader: any;
			MetadataScopeType: any;
			Assembly: any;
			AssemblyResolver: any;
			MetadataResolver: any;
			TypeSystem: any;
			HasAssemblyReferences: boolean;
			AssemblyReferences: any;
			HasModuleReferences: boolean;
			ModuleReferences: any;
			HasResources: boolean;
			Resources: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			HasTypes: boolean;
			Types: any;
			HasExportedTypes: boolean;
			ExportedTypes: any;
			EntryPoint: any;
			HasCustomDebugInformations: boolean;
			CustomDebugInformations: any;
			HasDebugHeader: boolean;
			 Import(method: any) : any;
			 Import(method: any, context: any) : any;
			 ImportReference(method: any) : any;
			 ImportReference(method: any, context: any) : any;
			 LookupToken(token: number) : any;
			 LookupToken(token: any) : any;
			 GetDebugHeader() : any;
			 static CreateModule(name: string, kind: any) : any;
			 static CreateModule(name: string, parameters: any) : any;
			 ReadSymbols() : void;
			 ReadSymbols(reader: any) : void;
			 ReadSymbols(reader: any, throwIfSymbolsAreNotMaching: boolean) : void;
			 static ReadModule(fileName: string) : any;
			 static ReadModule(fileName: string, parameters: any) : any;
			 static ReadModule(stream: any) : any;
			 static ReadModule(stream: any, parameters: any) : any;
			 Write(fileName: string) : void;
			 Write(fileName: string, parameters: any) : void;
			 Write() : void;
			 Write(parameters: any) : void;
			 Write(stream: any) : void;
			 Write(stream: any, parameters: any) : void;
			 Dispose() : void;
			 HasTypeReference(fullName: string) : boolean;
			 HasTypeReference(scope: string, fullName: string) : boolean;
			 TryGetTypeReference(fullName: string, type: any) : boolean;
			 TryGetTypeReference(scope: string, fullName: string, type: any) : boolean;
			 GetTypeReferences() : any;
			 GetMemberReferences() : any;
			 GetCustomAttributes() : any;
			 GetType(fullName: string, runtimeName: boolean) : any;
			 GetType(fullName: string) : any;
			 GetType(namespace: string, name: string) : any;
			 GetTypes() : any;
			 Import(type: any) : any;
			 ImportReference(type: any) : any;
			 Import(type: any, context: any) : any;
			 ImportReference(type: any, context: any) : any;
			 Import(field: any) : any;
			 Import(field: any, context: any) : any;
			 ImportReference(field: any) : any;
			 ImportReference(field: any, context: any) : any;
			 Import(method: any) : any;
			 Import(method: any, context: any) : any;
			 ImportReference(method: any) : any;
			 ImportReference(method: any, context: any) : any;
			 Import(type: any) : any;
			 Import(type: any, context: any) : any;
			 ImportReference(type: any) : any;
			 ImportReference(type: any, context: any) : any;
			 Import(field: any) : any;
			 Import(field: any, context: any) : any;
			 ImportReference(field: any) : any;
			 ImportReference(field: any, context: any) : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum ModuleKind {
			Dll = 0,
			Console = 1,
			Windows = 2,
			NetModule = 3,
		}
		class ModuleParameters {
			Kind: any;
			Runtime: any;
			Timestamp: any;
			Architecture: any;
			AssemblyResolver: any;
			MetadataResolver: any;
			MetadataImporterProvider: any;
			ReflectionImporterProvider: any;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ModuleReference {
			Name: string;
			MetadataScopeType: any;
			MetadataToken: any;
			 constructor(name: string) ;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum NativeType {
			None = 102,
			Boolean = 2,
			I1 = 3,
			U1 = 4,
			I2 = 5,
			U2 = 6,
			I4 = 7,
			U4 = 8,
			I8 = 9,
			U8 = 10,
			R4 = 11,
			R8 = 12,
			LPStr = 20,
			Int = 31,
			UInt = 32,
			Func = 38,
			Array = 42,
			Currency = 15,
			BStr = 19,
			LPWStr = 21,
			LPTStr = 22,
			FixedSysString = 23,
			IUnknown = 25,
			IDispatch = 26,
			Struct = 27,
			IntF = 28,
			SafeArray = 29,
			FixedArray = 30,
			ByValStr = 34,
			ANSIBStr = 35,
			TBStr = 36,
			VariantBool = 37,
			ASAny = 40,
			LPStruct = 43,
			CustomMarshaler = 44,
			Error = 45,
			Max = 80,
		}
		class OptionalModifierType extends Mono.Cecil.TypeSpecification {
			ModifierType: any;
			Name: string;
			FullName: string;
			IsValueType: boolean;
			IsOptionalModifier: boolean;
			ContainsGenericParameter: boolean;
			 constructor(modifierType: any, type: any) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum ParameterAttributes {
			None = 0,
			In = 1,
			Out = 2,
			Lcid = 4,
			Retval = 8,
			Optional = 16,
			HasDefault = 4096,
			HasFieldMarshal = 8192,
			Unused = 53216,
		}
		class ParameterDefinition extends Mono.Cecil.ParameterReference {
			Attributes: any;
			Method: any;
			Sequence: number;
			HasConstant: boolean;
			Constant: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			HasMarshalInfo: boolean;
			MarshalInfo: any;
			IsIn: boolean;
			IsOut: boolean;
			IsLcid: boolean;
			IsReturnValue: boolean;
			IsOptional: boolean;
			HasDefault: boolean;
			HasFieldMarshal: boolean;
			 constructor(parameterType: any) ;
			 constructor(name: string, attributes: any, parameterType: any) ;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class ParameterReference {
			Name: string;
			Index: number;
			ParameterType: any;
			MetadataToken: any;
			 ToString() : string;
			 Resolve() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class PinnedType extends Mono.Cecil.TypeSpecification {
			IsValueType: boolean;
			IsPinned: boolean;
			 constructor(type: any) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum PInvokeAttributes {
			NoMangle = 1,
			CharSetMask = 6,
			CharSetNotSpec = 0,
			CharSetAnsi = 2,
			CharSetUnicode = 4,
			CharSetAuto = 6,
			SupportsLastError = 64,
			CallConvMask = 1792,
			CallConvWinapi = 256,
			CallConvCdecl = 512,
			CallConvStdCall = 768,
			CallConvThiscall = 1024,
			CallConvFastcall = 1280,
			BestFitMask = 48,
			BestFitEnabled = 16,
			BestFitDisabled = 32,
			ThrowOnUnmappableCharMask = 12288,
			ThrowOnUnmappableCharEnabled = 4096,
			ThrowOnUnmappableCharDisabled = 8192,
		}
		class PInvokeInfo {
			Attributes: any;
			EntryPoint: string;
			Module: any;
			IsNoMangle: boolean;
			IsCharSetNotSpec: boolean;
			IsCharSetAnsi: boolean;
			IsCharSetUnicode: boolean;
			IsCharSetAuto: boolean;
			SupportsLastError: boolean;
			IsCallConvWinapi: boolean;
			IsCallConvCdecl: boolean;
			IsCallConvStdCall: boolean;
			IsCallConvThiscall: boolean;
			IsCallConvFastcall: boolean;
			IsBestFitEnabled: boolean;
			IsBestFitDisabled: boolean;
			IsThrowOnUnmappableCharEnabled: boolean;
			IsThrowOnUnmappableCharDisabled: boolean;
			 constructor(attributes: any, entryPoint: string, module: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class PointerType extends Mono.Cecil.TypeSpecification {
			Name: string;
			FullName: string;
			IsValueType: boolean;
			IsPointer: boolean;
			 constructor(type: any) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum PropertyAttributes {
			None = 0,
			SpecialName = 512,
			RTSpecialName = 1024,
			HasDefault = 4096,
			Unused = 59903,
		}
		class PropertyDefinition extends Mono.Cecil.PropertyReference {
			Attributes: any;
			HasThis: boolean;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			GetMethod: any;
			SetMethod: any;
			HasOtherMethods: boolean;
			OtherMethods: any;
			HasParameters: boolean;
			Parameters: any;
			HasConstant: boolean;
			Constant: any;
			IsSpecialName: boolean;
			IsRuntimeSpecialName: boolean;
			HasDefault: boolean;
			DeclaringType: any;
			IsDefinition: boolean;
			FullName: string;
			 constructor(name: string, attributes: any, propertyType: any) ;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class PropertyReference extends Mono.Cecil.MemberReference {
			PropertyType: any;
			Parameters: any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ReaderParameters {
			ReadingMode: any;
			InMemory: boolean;
			AssemblyResolver: any;
			MetadataResolver: any;
			MetadataImporterProvider: any;
			ReflectionImporterProvider: any;
			SymbolStream: any;
			SymbolReaderProvider: any;
			ReadSymbols: boolean;
			ThrowIfSymbolsAreNotMatching: boolean;
			ReadWrite: boolean;
			ApplyWindowsRuntimeProjections: boolean;
			 constructor() ;
			 constructor(readingMode: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum ReadingMode {
			Immediate = 1,
			Deferred = 2,
		}
		class RequiredModifierType extends Mono.Cecil.TypeSpecification {
			ModifierType: any;
			Name: string;
			FullName: string;
			IsValueType: boolean;
			IsRequiredModifier: boolean;
			ContainsGenericParameter: boolean;
			 constructor(modifierType: any, type: any) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ResolutionException extends System.Exception {
			Member: any;
			Scope: any;
			 constructor(member: any) ;
			 constructor(member: any, innerException: any) ;
			 GetBaseException() : any;
			 GetObjectData(info: any, context: any) : void;
			 ToString() : string;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class Resource {
			Name: string;
			Attributes: any;
			ResourceType: any;
			IsPublic: boolean;
			IsPrivate: boolean;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum ResourceType {
			Linked = 0,
			Embedded = 1,
			AssemblyLinked = 2,
		}
		class SafeArrayMarshalInfo extends Mono.Cecil.MarshalInfo {
			ElementType: any;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum SecurityAction {
			Request = 1,
			Demand = 2,
			Assert = 3,
			Deny = 4,
			PermitOnly = 5,
			LinkDemand = 6,
			InheritDemand = 7,
			RequestMinimum = 8,
			RequestOptional = 9,
			RequestRefuse = 10,
			PreJitGrant = 11,
			PreJitDeny = 12,
			NonCasDemand = 13,
			NonCasLinkDemand = 14,
			NonCasInheritance = 15,
		}
		class SecurityAttribute {
			AttributeType: any;
			HasFields: boolean;
			Fields: any;
			HasProperties: boolean;
			Properties: any;
			 constructor(attributeType: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class SecurityDeclaration {
			Action: any;
			HasSecurityAttributes: boolean;
			SecurityAttributes: any;
			 constructor(action: any) ;
			 constructor(action: any, blob: any) ;
			 GetBlob() : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class SentinelType extends Mono.Cecil.TypeSpecification {
			IsValueType: boolean;
			IsSentinel: boolean;
			 constructor(type: any) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum TargetArchitecture {
			I386 = 332,
			AMD64 = 34404,
			IA64 = 512,
			ARM = 448,
			ARMv7 = 452,
			ARM64 = 43620,
		}
		enum TargetRuntime {
			Net_1_0 = 0,
			Net_1_1 = 1,
			Net_2_0 = 2,
			Net_4_0 = 3,
		}
		enum TokenType {
			Module = 0,
			TypeRef = 16777216,
			TypeDef = 33554432,
			Field = 67108864,
			Method = 100663296,
			Param = 134217728,
			InterfaceImpl = 150994944,
			MemberRef = 167772160,
			CustomAttribute = 201326592,
			Permission = 234881024,
			Signature = 285212672,
			Event = 335544320,
			Property = 385875968,
			ModuleRef = 436207616,
			TypeSpec = 452984832,
			Assembly = 536870912,
			AssemblyRef = 587202560,
			File = 637534208,
			ExportedType = 654311424,
			ManifestResource = 671088640,
			GenericParam = 704643072,
			MethodSpec = 721420288,
			GenericParamConstraint = 738197504,
			Document = 805306368,
			MethodDebugInformation = 822083584,
			LocalScope = 838860800,
			LocalVariable = 855638016,
			LocalConstant = 872415232,
			ImportScope = 889192448,
			StateMachineMethod = 905969664,
			CustomDebugInformation = 922746880,
			String = 1879048192,
		}
		/** Flags */
		enum TypeAttributes {
			VisibilityMask = 7,
			NotPublic = 0,
			Public = 1,
			NestedPublic = 2,
			NestedPrivate = 3,
			NestedFamily = 4,
			NestedAssembly = 5,
			NestedFamANDAssem = 6,
			NestedFamORAssem = 7,
			LayoutMask = 24,
			AutoLayout = 0,
			SequentialLayout = 8,
			ExplicitLayout = 16,
			ClassSemanticMask = 32,
			Class = 0,
			Interface = 32,
			Abstract = 128,
			Sealed = 256,
			SpecialName = 1024,
			Import = 4096,
			Serializable = 8192,
			WindowsRuntime = 16384,
			StringFormatMask = 196608,
			AnsiClass = 0,
			UnicodeClass = 65536,
			AutoClass = 131072,
			BeforeFieldInit = 1048576,
			RTSpecialName = 2048,
			HasSecurity = 262144,
			Forwarder = 2097152,
		}
		class TypeDefinition extends Mono.Cecil.TypeReference {
			Attributes: any;
			BaseType: any;
			Name: string;
			HasLayoutInfo: boolean;
			PackingSize: number;
			ClassSize: number;
			HasInterfaces: boolean;
			Interfaces: any;
			HasNestedTypes: boolean;
			NestedTypes: any;
			HasMethods: boolean;
			Methods: any;
			HasFields: boolean;
			Fields: any;
			HasEvents: boolean;
			Events: any;
			HasProperties: boolean;
			Properties: any;
			HasSecurityDeclarations: boolean;
			SecurityDeclarations: any;
			HasCustomAttributes: boolean;
			CustomAttributes: any;
			HasGenericParameters: boolean;
			GenericParameters: any;
			IsNotPublic: boolean;
			IsPublic: boolean;
			IsNestedPublic: boolean;
			IsNestedPrivate: boolean;
			IsNestedFamily: boolean;
			IsNestedAssembly: boolean;
			IsNestedFamilyAndAssembly: boolean;
			IsNestedFamilyOrAssembly: boolean;
			IsAutoLayout: boolean;
			IsSequentialLayout: boolean;
			IsExplicitLayout: boolean;
			IsClass: boolean;
			IsInterface: boolean;
			IsAbstract: boolean;
			IsSealed: boolean;
			IsSpecialName: boolean;
			IsImport: boolean;
			IsSerializable: boolean;
			IsWindowsRuntime: boolean;
			IsAnsiClass: boolean;
			IsUnicodeClass: boolean;
			IsAutoClass: boolean;
			IsBeforeFieldInit: boolean;
			IsRuntimeSpecialName: boolean;
			HasSecurity: boolean;
			IsEnum: boolean;
			IsValueType: boolean;
			IsPrimitive: boolean;
			MetadataType: any;
			IsDefinition: boolean;
			DeclaringType: any;
			 constructor(namespace: string, name: string, attributes: any, baseType: any) ;
			 constructor(namespace: string, name: string, attributes: any) ;
			 Resolve() : any;
			 GetElementType() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class TypeReference extends Mono.Cecil.MemberReference {
			Name: string;
			Namespace: string;
			IsValueType: boolean;
			Module: any;
			HasGenericParameters: boolean;
			GenericParameters: any;
			Scope: any;
			IsNested: boolean;
			DeclaringType: any;
			FullName: string;
			IsByReference: boolean;
			IsPointer: boolean;
			IsSentinel: boolean;
			IsArray: boolean;
			IsGenericParameter: boolean;
			IsGenericInstance: boolean;
			IsRequiredModifier: boolean;
			IsOptionalModifier: boolean;
			IsPinned: boolean;
			IsFunctionPointer: boolean;
			IsPrimitive: boolean;
			MetadataType: any;
			 constructor(namespace: string, name: string, module: any, scope: any) ;
			 constructor(namespace: string, name: string, module: any, scope: any, valueType: boolean) ;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class TypeSpecification extends Mono.Cecil.TypeReference {
			ElementType: any;
			Name: string;
			Namespace: string;
			Scope: any;
			Module: any;
			FullName: string;
			ContainsGenericParameter: boolean;
			MetadataType: any;
			 GetElementType() : any;
			 Resolve() : any;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class TypeSystem {
			Corlib: any;
			CoreLibrary: any;
			Object: any;
			Void: any;
			Boolean: any;
			Char: any;
			SByte: any;
			Byte: any;
			Int16: any;
			UInt16: any;
			Int32: any;
			UInt32: any;
			Int64: any;
			UInt64: any;
			Single: any;
			Double: any;
			IntPtr: any;
			UIntPtr: any;
			String: any;
			TypedReference: any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum VariantType {
			None = 0,
			I2 = 2,
			I4 = 3,
			R4 = 4,
			R8 = 5,
			CY = 6,
			Date = 7,
			BStr = 8,
			Dispatch = 9,
			Error = 10,
			Bool = 11,
			Variant = 12,
			Unknown = 13,
			Decimal = 14,
			I1 = 16,
			UI1 = 17,
			UI2 = 18,
			UI4 = 19,
			I8 = 20,
			UI8 = 21,
			Int = 22,
			UInt = 23,
		}
		class WriterParameters {
			Timestamp: any;
			SymbolStream: any;
			SymbolWriterProvider: any;
			WriteSymbols: boolean;
			HasStrongNameKey: boolean;
			StrongNameKeyBlob: any;
			StrongNameKeyContainer: string;
			StrongNameKeyPair: any;
			DeterministicMvid: boolean;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
	}
	module System {
		abstract class Attribute {
			TypeId: any;
			 static GetCustomAttributes(element: any, type: any) : any;
			 static GetCustomAttributes(element: any, type: any, inherit: boolean) : any;
			 static GetCustomAttributes(element: any) : any;
			 static GetCustomAttributes(element: any, inherit: boolean) : any;
			 static IsDefined(element: any, attributeType: any) : boolean;
			 static IsDefined(element: any, attributeType: any, inherit: boolean) : boolean;
			 static GetCustomAttribute(element: any, attributeType: any) : any;
			 static GetCustomAttribute(element: any, attributeType: any, inherit: boolean) : any;
			 static GetCustomAttributes(element: any) : any;
			 static GetCustomAttributes(element: any, attributeType: any) : any;
			 static GetCustomAttributes(element: any, attributeType: any, inherit: boolean) : any;
			 static GetCustomAttributes(element: any, inherit: boolean) : any;
			 static IsDefined(element: any, attributeType: any) : boolean;
			 static IsDefined(element: any, attributeType: any, inherit: boolean) : boolean;
			 static GetCustomAttribute(element: any, attributeType: any) : any;
			 static GetCustomAttribute(element: any, attributeType: any, inherit: boolean) : any;
			 static GetCustomAttributes(element: any, attributeType: any) : any;
			 static GetCustomAttributes(element: any) : any;
			 static GetCustomAttributes(element: any, inherit: boolean) : any;
			 static GetCustomAttributes(element: any, attributeType: any, inherit: boolean) : any;
			 static IsDefined(element: any, attributeType: any) : boolean;
			 static IsDefined(element: any, attributeType: any, inherit: boolean) : boolean;
			 static GetCustomAttribute(element: any, attributeType: any) : any;
			 static GetCustomAttribute(element: any, attributeType: any, inherit: boolean) : any;
			 static GetCustomAttributes(element: any, attributeType: any) : any;
			 static GetCustomAttributes(element: any, attributeType: any, inherit: boolean) : any;
			 static GetCustomAttributes(element: any) : any;
			 static GetCustomAttributes(element: any, inherit: boolean) : any;
			 static IsDefined(element: any, attributeType: any) : boolean;
			 static IsDefined(element: any, attributeType: any, inherit: boolean) : boolean;
			 static GetCustomAttribute(element: any, attributeType: any) : any;
			 static GetCustomAttribute(element: any, attributeType: any, inherit: boolean) : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		abstract class Console {
			 static WriteLine(format: string, arg0: any, arg1: any) : void;
			 static WriteLine(format: string, arg0: any, arg1: any, arg2: any) : void;
			 static WriteLine(format: string, ...arg: any) : void;
			 static Write(format: string, arg0: any) : void;
			 static Write(format: string, arg0: any, arg1: any) : void;
			 static Write(format: string, arg0: any, arg1: any, arg2: any) : void;
			 static Write(format: string, ...arg: any) : void;
			 static Write(value: boolean) : void;
			 static Write(value: any) : void;
			 static Write(buffer: any) : void;
			 static Write(buffer: any, index: number, count: number) : void;
			 static Write(value: any) : void;
			 static Write(value: number) : void;
			 static Write(value: number) : void;
			 static Write(value: number) : void;
			 static Write(value: any) : void;
			 static Write(value: number) : void;
			 static Write(value: any) : void;
			 static Write(value: any) : void;
			 static Write(value: string) : void;
			 static ReadKey() : any;
			 static ReadKey(intercept: boolean) : any;
			 static ResetColor() : void;
			 static SetBufferSize(width: number, height: number) : void;
			 static SetWindowPosition(left: number, top: number) : void;
			 static SetWindowSize(width: number, height: number) : void;
			 static Beep() : void;
			 static Beep(frequency: number, duration: number) : void;
			 static MoveBufferArea(sourceLeft: number, sourceTop: number, sourceWidth: number, sourceHeight: number, targetLeft: number, targetTop: number) : void;
			 static MoveBufferArea(sourceLeft: number, sourceTop: number, sourceWidth: number, sourceHeight: number, targetLeft: number, targetTop: number, sourceChar: any, sourceForeColor: any, sourceBackColor: any) : void;
			 static Clear() : void;
			 static SetCursorPosition(left: number, top: number) : void;
			 static add_CancelKeyPress(value: any) : void;
			 static remove_CancelKeyPress(value: any) : void;
			 static OpenStandardInput() : any;
			 static OpenStandardInput(bufferSize: number) : any;
			 static OpenStandardOutput() : any;
			 static OpenStandardOutput(bufferSize: number) : any;
			 static OpenStandardError() : any;
			 static OpenStandardError(bufferSize: number) : any;
			 static SetIn(newIn: any) : void;
			 static SetOut(newOut: any) : void;
			 static SetError(newError: any) : void;
			 static Read() : number;
			 static ReadLine() : string;
			 static WriteLine() : void;
			 static WriteLine(value: boolean) : void;
			 static WriteLine(value: any) : void;
			 static WriteLine(buffer: any) : void;
			 static WriteLine(buffer: any, index: number, count: number) : void;
			 static WriteLine(value: number) : void;
			 static WriteLine(value: any) : void;
			 static WriteLine(value: number) : void;
			 static WriteLine(value: number) : void;
			 static WriteLine(value: any) : void;
			 static WriteLine(value: number) : void;
			 static WriteLine(value: any) : void;
			 static WriteLine(value: any) : void;
			 static WriteLine(value: string) : void;
			 static WriteLine(format: string, arg0: any) : void;
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
		abstract class Delegate {
			Target: any;
			Method: any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 static CreateDelegate(type: any, target: any, method: string, ignoreCase: boolean, throwOnBindFailure: boolean) : any;
			 static CreateDelegate(type: any, target: any, method: string, ignoreCase: boolean, throwOnBindFailure: boolean) : any;
			 static CreateDelegate(type: any, method: any, throwOnBindFailure: boolean) : any;
			 static CreateDelegate(type: any, firstArgument: any, method: any, throwOnBindFailure: boolean) : any;
			 Clone() : any;
			 static Combine(a: any, b: any) : any;
			 static Combine(...delegates: any) : any;
			 static CreateDelegate(type: any, firstArgument: any, method: any) : any;
			 static CreateDelegate(type: any, method: any) : any;
			 static CreateDelegate(type: any, target: any, method: string) : any;
			 static CreateDelegate(type: any, target: any, method: string, ignoreCase: boolean) : any;
			 static CreateDelegate(type: any, target: any, method: string) : any;
			 static CreateDelegate(type: any, target: any, method: string, ignoreCase: boolean) : any;
			 GetInvocationList() : any;
			 DynamicInvoke(...args: any) : any;
			 GetObjectData(info: any, context: any) : void;
			 static Remove(source: any, value: any) : any;
			 static RemoveAll(source: any, value: any) : any;
			 static op_Equality(d1: any, d2: any) : boolean;
			 static op_Inequality(d1: any, d2: any) : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		abstract class Enum extends System.ValueType {
			 Equals(obj: any) : boolean;
			 HasFlag(flag: any) : boolean;
			 static GetName(enumType: any, value: any) : string;
			 static GetNames(enumType: any) : string[];
			 static GetUnderlyingType(enumType: any) : any;
			 static GetValues(enumType: any) : any;
			 static IsDefined(enumType: any, value: any) : boolean;
			 static Parse(enumType: any, value: string) : any;
			 static Parse(enumType: any, value: string, ignoreCase: boolean) : any;
			 static Parse(value: string) : any;
			 static Parse(value: string, ignoreCase: boolean) : any;
			 static TryParse(enumType: any, value: string, result: any) : boolean;
			 static TryParse(enumType: any, value: string, ignoreCase: boolean, result: any) : boolean;
			 static TryParse(value: string, result: any) : boolean;
			 static TryParse(value: string, ignoreCase: boolean, result: any) : boolean;
			 static ToObject(enumType: any, value: any) : any;
			 static Format(enumType: any, value: any, format: string) : string;
			 GetHashCode() : number;
			 ToString() : string;
			 CompareTo(target: any) : number;
			 ToString(format: string, provider: any) : string;
			 ToString(format: string) : string;
			 ToString(provider: any) : string;
			 GetTypeCode() : any;
			 static ToObject(enumType: any, value: any) : any;
			 static ToObject(enumType: any, value: number) : any;
			 static ToObject(enumType: any, value: number) : any;
			 static ToObject(enumType: any, value: any) : any;
			 static ToObject(enumType: any, value: any) : any;
			 static ToObject(enumType: any, value: any) : any;
			 static ToObject(enumType: any, value: number) : any;
			 static ToObject(enumType: any, value: any) : any;
			 GetType() : any;
		}
		class EventArgs {
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class Exception {
			TargetSite: any;
			StackTrace: string;
			Message: string;
			Data: any;
			InnerException: any;
			HelpLink: string;
			Source: string;
			HResult: number;
			 constructor() ;
			 constructor(message: string) ;
			 constructor(message: string, innerException: any) ;
			 GetBaseException() : any;
			 GetObjectData(info: any, context: any) : void;
			 ToString() : string;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		interface IDisposable {
			 Dispose() : void;
		}
		class InvalidOperationException extends System.SystemException {
			 constructor() ;
			 constructor(message: string) ;
			 constructor(message: string, innerException: any) ;
			 GetBaseException() : any;
			 GetObjectData(info: any, context: any) : void;
			 ToString() : string;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class MarshalByRefObject {
			 GetLifetimeService() : any;
			 InitializeLifetimeService() : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class MulticastDelegate extends System.Delegate {
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 static op_Equality(d1: any, d2: any) : boolean;
			 static op_Inequality(d1: any, d2: any) : boolean;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		class String {
			Chars: any;
			Length: number;
			 constructor(value: any) ;
			 constructor(value: any, startIndex: number, length: number) ;
			 constructor(value: any) ;
			 constructor(value: any, startIndex: number, length: number) ;
			 constructor(value: any) ;
			 constructor(value: any, startIndex: number, length: number) ;
			 constructor(value: any, startIndex: number, length: number, enc: any) ;
			 constructor(c: any, count: number) ;
			 constructor(value: any) ;
			 Replace(oldChar: any, newChar: any) : string;
			 Replace(oldValue: string, newValue: string) : string;
			 Split(separator: any, options?: any) : string[];
			 Split(separator: any, count: number, options?: any) : string[];
			 Split(...separator: any) : string[];
			 Split(separator: any, count: number) : string[];
			 Split(separator: any, options: any) : string[];
			 Split(separator: any, count: number, options: any) : string[];
			 Split(separator: string, options?: any) : string[];
			 Split(separator: string, count: number, options?: any) : string[];
			 Split(separator: string[], options: any) : string[];
			 Split(separator: string[], count: number, options: any) : string[];
			 Substring(startIndex: number) : string;
			 Substring(startIndex: number, length: number) : string;
			 ToLower() : string;
			 ToLower(culture: any) : string;
			 ToLowerInvariant() : string;
			 ToUpper() : string;
			 ToUpper(culture: any) : string;
			 ToUpperInvariant() : string;
			 Trim() : string;
			 Trim(trimChar: any) : string;
			 Trim(...trimChars: any) : string;
			 TrimStart() : string;
			 TrimStart(trimChar: any) : string;
			 TrimStart(...trimChars: any) : string;
			 TrimEnd() : string;
			 TrimEnd(trimChar: any) : string;
			 TrimEnd(...trimChars: any) : string;
			 Contains(value: string) : boolean;
			 Contains(value: string, comparisonType: any) : boolean;
			 Contains(value: any) : boolean;
			 Contains(value: any, comparisonType: any) : boolean;
			 IndexOf(value: any) : number;
			 IndexOf(value: any, startIndex: number) : number;
			 IndexOf(value: any, comparisonType: any) : number;
			 IndexOf(value: any, startIndex: number, count: number) : number;
			 IndexOfAny(anyOf: any) : number;
			 IndexOfAny(anyOf: any, startIndex: number) : number;
			 IndexOfAny(anyOf: any, startIndex: number, count: number) : number;
			 IndexOf(value: string) : number;
			 IndexOf(value: string, startIndex: number) : number;
			 IndexOf(value: string, startIndex: number, count: number) : number;
			 IndexOf(value: string, comparisonType: any) : number;
			 IndexOf(value: string, startIndex: number, comparisonType: any) : number;
			 IndexOf(value: string, startIndex: number, count: number, comparisonType: any) : number;
			 LastIndexOf(value: any) : number;
			 LastIndexOf(value: any, startIndex: number) : number;
			 LastIndexOf(value: any, startIndex: number, count: number) : number;
			 LastIndexOfAny(anyOf: any) : number;
			 LastIndexOfAny(anyOf: any, startIndex: number) : number;
			 LastIndexOfAny(anyOf: any, startIndex: number, count: number) : number;
			 LastIndexOf(value: string) : number;
			 LastIndexOf(value: string, startIndex: number) : number;
			 LastIndexOf(value: string, startIndex: number, count: number) : number;
			 LastIndexOf(value: string, comparisonType: any) : number;
			 LastIndexOf(value: string, startIndex: number, comparisonType: any) : number;
			 LastIndexOf(value: string, startIndex: number, count: number, comparisonType: any) : number;
			 ToString() : string;
			 ToString(provider: any) : string;
			 GetEnumerator() : any;
			 EnumerateRunes() : any;
			 GetTypeCode() : any;
			 IsNormalized() : boolean;
			 IsNormalized(normalizationForm: any) : boolean;
			 Normalize() : string;
			 Normalize(normalizationForm: any) : string;
			 static Concat(arg0: any) : string;
			 static Concat(arg0: any, arg1: any) : string;
			 static Concat(arg0: any, arg1: any, arg2: any) : string;
			 static Concat(...args: any) : string;
			 static Concat(values: any) : string;
			 static Concat(values: any) : string;
			 static Concat(str0: string, str1: string) : string;
			 static Concat(str0: string, str1: string, str2: string) : string;
			 static Concat(str0: string, str1: string, str2: string, str3: string) : string;
			 static Concat(str0: any, str1: any) : string;
			 static Concat(str0: any, str1: any, str2: any) : string;
			 static Concat(str0: any, str1: any, str2: any, str3: any) : string;
			 static Concat(...values: string[]) : string;
			 static Format(format: string, arg0: any) : string;
			 static Format(format: string, arg0: any, arg1: any) : string;
			 static Format(format: string, arg0: any, arg1: any, arg2: any) : string;
			 static Format(format: string, ...args: any) : string;
			 static Format(provider: any, format: string, arg0: any) : string;
			 static Format(provider: any, format: string, arg0: any, arg1: any) : string;
			 static Format(provider: any, format: string, arg0: any, arg1: any, arg2: any) : string;
			 static Format(provider: any, format: string, ...args: any) : string;
			 Insert(startIndex: number, value: string) : string;
			 static Join(separator: any, ...value: string[]) : string;
			 static Join(separator: any, ...values: any) : string;
			 static Join(separator: any, values: any) : string;
			 static Join(separator: any, value: string[], startIndex: number, count: number) : string;
			 static Join(separator: string, ...value: string[]) : string;
			 static Join(separator: string, ...values: any) : string;
			 static Join(separator: string, values: any) : string;
			 static Join(separator: string, values: any) : string;
			 static Join(separator: string, value: string[], startIndex: number, count: number) : string;
			 PadLeft(totalWidth: number) : string;
			 PadLeft(totalWidth: number, paddingChar: any) : string;
			 PadRight(totalWidth: number) : string;
			 PadRight(totalWidth: number, paddingChar: any) : string;
			 Remove(startIndex: number, count: number) : string;
			 Remove(startIndex: number) : string;
			 Replace(oldValue: string, newValue: string, ignoreCase: boolean, culture: any) : string;
			 Replace(oldValue: string, newValue: string, comparisonType: any) : string;
			 static Intern(str: string) : string;
			 static IsInterned(str: string) : string;
			 static Compare(strA: string, strB: string) : number;
			 static Compare(strA: string, strB: string, ignoreCase: boolean) : number;
			 static Compare(strA: string, strB: string, comparisonType: any) : number;
			 static Compare(strA: string, strB: string, culture: any, options: any) : number;
			 static Compare(strA: string, strB: string, ignoreCase: boolean, culture: any) : number;
			 static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number) : number;
			 static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, ignoreCase: boolean) : number;
			 static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, ignoreCase: boolean, culture: any) : number;
			 static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, culture: any, options: any) : number;
			 static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, comparisonType: any) : number;
			 static CompareOrdinal(strA: string, strB: string) : number;
			 static CompareOrdinal(strA: string, indexA: number, strB: string, indexB: number, length: number) : number;
			 CompareTo(value: any) : number;
			 CompareTo(strB: string) : number;
			 EndsWith(value: string) : boolean;
			 EndsWith(value: string, comparisonType: any) : boolean;
			 EndsWith(value: string, ignoreCase: boolean, culture: any) : boolean;
			 EndsWith(value: any) : boolean;
			 Equals(obj: any) : boolean;
			 Equals(value: string) : boolean;
			 Equals(value: string, comparisonType: any) : boolean;
			 static Equals(a: string, b: string) : boolean;
			 static Equals(a: string, b: string, comparisonType: any) : boolean;
			 static op_Equality(a: string, b: string) : boolean;
			 static op_Inequality(a: string, b: string) : boolean;
			 GetHashCode() : number;
			 GetHashCode(comparisonType: any) : number;
			 static GetHashCode(value: any) : number;
			 static GetHashCode(value: any, comparisonType: any) : number;
			 StartsWith(value: string) : boolean;
			 StartsWith(value: string, comparisonType: any) : boolean;
			 StartsWith(value: string, ignoreCase: boolean, culture: any) : boolean;
			 StartsWith(value: any) : boolean;
			 static Create(length: number, state: any, action: any) : string;
			 static op_Implicit(value: string) : any;
			 Clone() : any;
			 static Copy(str: string) : string;
			 CopyTo(sourceIndex: number, destination: any, destinationIndex: number, count: number) : void;
			 ToCharArray() : any;
			 ToCharArray(startIndex: number, length: number) : any;
			 static IsNullOrEmpty(value: string) : boolean;
			 static IsNullOrWhiteSpace(value: string) : boolean;
			 GetPinnableReference() : any;
			 GetType() : any;
		}
		class SystemException extends System.Exception {
			 constructor() ;
			 constructor(message: string) ;
			 constructor(message: string, innerException: any) ;
			 GetBaseException() : any;
			 GetObjectData(info: any, context: any) : void;
			 ToString() : string;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class ValueType {
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 ToString() : string;
			 GetType() : any;
		}
	}
	module System.IO {
		abstract class Directory {
			 static GetParent(path: string) : any;
			 static CreateDirectory(path: string) : any;
			 static Exists(path: string) : boolean;
			 static SetCreationTime(path: string, creationTime: any) : void;
			 static SetCreationTimeUtc(path: string, creationTimeUtc: any) : void;
			 static GetCreationTime(path: string) : any;
			 static GetCreationTimeUtc(path: string) : any;
			 static SetLastWriteTime(path: string, lastWriteTime: any) : void;
			 static SetLastWriteTimeUtc(path: string, lastWriteTimeUtc: any) : void;
			 static GetLastWriteTime(path: string) : any;
			 static GetLastWriteTimeUtc(path: string) : any;
			 static SetLastAccessTime(path: string, lastAccessTime: any) : void;
			 static SetLastAccessTimeUtc(path: string, lastAccessTimeUtc: any) : void;
			 static GetLastAccessTime(path: string) : any;
			 static GetLastAccessTimeUtc(path: string) : any;
			 static GetFiles(path: string) : string[];
			 static GetFiles(path: string, searchPattern: string) : string[];
			 static GetFiles(path: string, searchPattern: string, searchOption: any) : string[];
			 static GetFiles(path: string, searchPattern: string, enumerationOptions: any) : string[];
			 static GetDirectories(path: string) : string[];
			 static GetDirectories(path: string, searchPattern: string) : string[];
			 static GetDirectories(path: string, searchPattern: string, searchOption: any) : string[];
			 static GetDirectories(path: string, searchPattern: string, enumerationOptions: any) : string[];
			 static GetFileSystemEntries(path: string) : string[];
			 static GetFileSystemEntries(path: string, searchPattern: string) : string[];
			 static GetFileSystemEntries(path: string, searchPattern: string, searchOption: any) : string[];
			 static GetFileSystemEntries(path: string, searchPattern: string, enumerationOptions: any) : string[];
			 static EnumerateDirectories(path: string) : any;
			 static EnumerateDirectories(path: string, searchPattern: string) : any;
			 static EnumerateDirectories(path: string, searchPattern: string, searchOption: any) : any;
			 static EnumerateDirectories(path: string, searchPattern: string, enumerationOptions: any) : any;
			 static EnumerateFiles(path: string) : any;
			 static EnumerateFiles(path: string, searchPattern: string) : any;
			 static EnumerateFiles(path: string, searchPattern: string, searchOption: any) : any;
			 static EnumerateFiles(path: string, searchPattern: string, enumerationOptions: any) : any;
			 static EnumerateFileSystemEntries(path: string) : any;
			 static EnumerateFileSystemEntries(path: string, searchPattern: string) : any;
			 static EnumerateFileSystemEntries(path: string, searchPattern: string, searchOption: any) : any;
			 static EnumerateFileSystemEntries(path: string, searchPattern: string, enumerationOptions: any) : any;
			 static GetDirectoryRoot(path: string) : string;
			 static GetCurrentDirectory() : string;
			 static SetCurrentDirectory(path: string) : void;
			 static Move(sourceDirName: string, destDirName: string) : void;
			 static Delete(path: string) : void;
			 static Delete(path: string, recursive: boolean) : void;
			 static GetLogicalDrives() : string[];
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
		class DirectoryInfo extends System.IO.FileSystemInfo {
			Parent: any;
			Root: any;
			 constructor(path: string) ;
			 CreateSubdirectory(path: string) : any;
			 Create() : void;
			 GetFiles() : any;
			 GetFiles(searchPattern: string) : any;
			 GetFiles(searchPattern: string, searchOption: any) : any;
			 GetFiles(searchPattern: string, enumerationOptions: any) : any;
			 GetFileSystemInfos() : any;
			 GetFileSystemInfos(searchPattern: string) : any;
			 GetFileSystemInfos(searchPattern: string, searchOption: any) : any;
			 GetFileSystemInfos(searchPattern: string, enumerationOptions: any) : any;
			 GetDirectories() : any;
			 GetDirectories(searchPattern: string) : any;
			 GetDirectories(searchPattern: string, searchOption: any) : any;
			 GetDirectories(searchPattern: string, enumerationOptions: any) : any;
			 EnumerateDirectories() : any;
			 EnumerateDirectories(searchPattern: string) : any;
			 EnumerateDirectories(searchPattern: string, searchOption: any) : any;
			 EnumerateDirectories(searchPattern: string, enumerationOptions: any) : any;
			 EnumerateFiles() : any;
			 EnumerateFiles(searchPattern: string) : any;
			 EnumerateFiles(searchPattern: string, searchOption: any) : any;
			 EnumerateFiles(searchPattern: string, enumerationOptions: any) : any;
			 EnumerateFileSystemInfos() : any;
			 EnumerateFileSystemInfos(searchPattern: string) : any;
			 EnumerateFileSystemInfos(searchPattern: string, searchOption: any) : any;
			 EnumerateFileSystemInfos(searchPattern: string, enumerationOptions: any) : any;
			 MoveTo(destDirName: string) : void;
			 Delete() : void;
			 Delete(recursive: boolean) : void;
			 GetObjectData(info: any, context: any) : void;
			 ToString() : string;
			 Refresh() : void;
			 GetLifetimeService() : any;
			 InitializeLifetimeService() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class File {
			 static OpenText(path: string) : any;
			 static CreateText(path: string) : any;
			 static AppendText(path: string) : any;
			 static Copy(sourceFileName: string, destFileName: string) : void;
			 static Copy(sourceFileName: string, destFileName: string, overwrite: boolean) : void;
			 static Create(path: string) : any;
			 static Create(path: string, bufferSize: number) : any;
			 static Create(path: string, bufferSize: number, options: any) : any;
			 static Delete(path: string) : void;
			 static Exists(path: string) : boolean;
			 static Open(path: string, mode: any) : any;
			 static Open(path: string, mode: any, access: any) : any;
			 static Open(path: string, mode: any, access: any, share: any) : any;
			 static SetCreationTime(path: string, creationTime: any) : void;
			 static SetCreationTimeUtc(path: string, creationTimeUtc: any) : void;
			 static GetCreationTime(path: string) : any;
			 static GetCreationTimeUtc(path: string) : any;
			 static SetLastAccessTime(path: string, lastAccessTime: any) : void;
			 static SetLastAccessTimeUtc(path: string, lastAccessTimeUtc: any) : void;
			 static GetLastAccessTime(path: string) : any;
			 static GetLastAccessTimeUtc(path: string) : any;
			 static SetLastWriteTime(path: string, lastWriteTime: any) : void;
			 static SetLastWriteTimeUtc(path: string, lastWriteTimeUtc: any) : void;
			 static GetLastWriteTime(path: string) : any;
			 static GetLastWriteTimeUtc(path: string) : any;
			 static GetAttributes(path: string) : any;
			 static SetAttributes(path: string, fileAttributes: any) : void;
			 static OpenRead(path: string) : any;
			 static OpenWrite(path: string) : any;
			 static ReadAllText(path: string) : string;
			 static ReadAllText(path: string, encoding: any) : string;
			 static WriteAllText(path: string, contents: string) : void;
			 static WriteAllText(path: string, contents: string, encoding: any) : void;
			 static ReadAllBytes(path: string) : any;
			 static WriteAllBytes(path: string, bytes: any) : void;
			 static ReadAllLines(path: string) : string[];
			 static ReadAllLines(path: string, encoding: any) : string[];
			 static ReadLines(path: string) : any;
			 static ReadLines(path: string, encoding: any) : any;
			 static WriteAllLines(path: string, contents: string[]) : void;
			 static WriteAllLines(path: string, contents: any) : void;
			 static WriteAllLines(path: string, contents: string[], encoding: any) : void;
			 static WriteAllLines(path: string, contents: any, encoding: any) : void;
			 static AppendAllText(path: string, contents: string) : void;
			 static AppendAllText(path: string, contents: string, encoding: any) : void;
			 static AppendAllLines(path: string, contents: any) : void;
			 static AppendAllLines(path: string, contents: any, encoding: any) : void;
			 static Replace(sourceFileName: string, destinationFileName: string, destinationBackupFileName: string) : void;
			 static Replace(sourceFileName: string, destinationFileName: string, destinationBackupFileName: string, ignoreMetadataErrors: boolean) : void;
			 static Move(sourceFileName: string, destFileName: string) : void;
			 static Move(sourceFileName: string, destFileName: string, overwrite: boolean) : void;
			 static Encrypt(path: string) : void;
			 static Decrypt(path: string) : void;
			 static ReadAllTextAsync(path: string, cancellationToken?: any) : any;
			 static ReadAllTextAsync(path: string, encoding: any, cancellationToken?: any) : any;
			 static WriteAllTextAsync(path: string, contents: string, cancellationToken?: any) : any;
			 static WriteAllTextAsync(path: string, contents: string, encoding: any, cancellationToken?: any) : any;
			 static ReadAllBytesAsync(path: string, cancellationToken?: any) : any;
			 static WriteAllBytesAsync(path: string, bytes: any, cancellationToken?: any) : any;
			 static ReadAllLinesAsync(path: string, cancellationToken?: any) : any;
			 static ReadAllLinesAsync(path: string, encoding: any, cancellationToken?: any) : any;
			 static WriteAllLinesAsync(path: string, contents: any, cancellationToken?: any) : any;
			 static WriteAllLinesAsync(path: string, contents: any, encoding: any, cancellationToken?: any) : any;
			 static AppendAllTextAsync(path: string, contents: string, cancellationToken?: any) : any;
			 static AppendAllTextAsync(path: string, contents: string, encoding: any, cancellationToken?: any) : any;
			 static AppendAllLinesAsync(path: string, contents: any, cancellationToken?: any) : any;
			 static AppendAllLinesAsync(path: string, contents: any, encoding: any, cancellationToken?: any) : any;
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
		class FileNotFoundException extends System.IO.IOException {
			Message: string;
			FileName: string;
			FusionLog: string;
			 constructor() ;
			 constructor(message: string) ;
			 constructor(message: string, innerException: any) ;
			 constructor(message: string, fileName: string) ;
			 constructor(message: string, fileName: string, innerException: any) ;
			 ToString() : string;
			 GetObjectData(info: any, context: any) : void;
			 GetBaseException() : any;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class FileSystemInfo extends System.MarshalByRefObject {
			FullName: string;
			Extension: string;
			Name: string;
			Exists: boolean;
			CreationTime: any;
			CreationTimeUtc: any;
			LastAccessTime: any;
			LastAccessTimeUtc: any;
			LastWriteTime: any;
			LastWriteTimeUtc: any;
			Attributes: any;
			 GetObjectData(info: any, context: any) : void;
			 Delete() : void;
			 ToString() : string;
			 Refresh() : void;
			 GetLifetimeService() : any;
			 InitializeLifetimeService() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class IOException extends System.SystemException {
			 constructor() ;
			 constructor(message: string) ;
			 constructor(message: string, hresult: number) ;
			 constructor(message: string, innerException: any) ;
			 GetBaseException() : any;
			 GetObjectData(info: any, context: any) : void;
			 ToString() : string;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class Path {
			 static ChangeExtension(path: string, extension: string) : string;
			 static GetDirectoryName(path: string) : string;
			 static GetDirectoryName(path: any) : any;
			 static GetExtension(path: string) : string;
			 static GetExtension(path: any) : any;
			 static GetFileName(path: string) : string;
			 static GetFileName(path: any) : any;
			 static GetFileNameWithoutExtension(path: string) : string;
			 static GetFileNameWithoutExtension(path: any) : any;
			 static GetRandomFileName() : string;
			 static IsPathFullyQualified(path: string) : boolean;
			 static IsPathFullyQualified(path: any) : boolean;
			 static HasExtension(path: string) : boolean;
			 static HasExtension(path: any) : boolean;
			 static Combine(path1: string, path2: string) : string;
			 static Combine(path1: string, path2: string, path3: string) : string;
			 static Combine(path1: string, path2: string, path3: string, path4: string) : string;
			 static Combine(...paths: string[]) : string;
			 static Join(path1: any, path2: any) : string;
			 static Join(path1: any, path2: any, path3: any) : string;
			 static Join(path1: any, path2: any, path3: any, path4: any) : string;
			 static Join(path1: string, path2: string) : string;
			 static Join(path1: string, path2: string, path3: string) : string;
			 static Join(path1: string, path2: string, path3: string, path4: string) : string;
			 static Join(...paths: string[]) : string;
			 static TryJoin(path1: any, path2: any, destination: any, charsWritten: any) : boolean;
			 static TryJoin(path1: any, path2: any, path3: any, destination: any, charsWritten: any) : boolean;
			 static GetRelativePath(relativeTo: string, path: string) : string;
			 static TrimEndingDirectorySeparator(path: string) : string;
			 static TrimEndingDirectorySeparator(path: any) : any;
			 static EndsInDirectorySeparator(path: any) : boolean;
			 static EndsInDirectorySeparator(path: string) : boolean;
			 static GetInvalidFileNameChars() : any;
			 static GetInvalidPathChars() : any;
			 static GetFullPath(path: string) : string;
			 static GetFullPath(path: string, basePath: string) : string;
			 static GetTempPath() : string;
			 static GetTempFileName() : string;
			 static IsPathRooted(path: string) : boolean;
			 static IsPathRooted(path: any) : boolean;
			 static GetPathRoot(path: string) : string;
			 static GetPathRoot(path: any) : any;
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
	}
	module Mono.Cecil.Cil {
		class AsyncMethodBodyDebugInformation extends Mono.Cecil.Cil.CustomDebugInformation {
			CatchHandler: any;
			Yields: any;
			Resumes: any;
			ResumeMethods: any;
			Kind: any;
			 constructor(catchHandler: any) ;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class BinaryCustomDebugInformation extends Mono.Cecil.Cil.CustomDebugInformation {
			Data: any;
			Kind: any;
			 constructor(identifier: any, data: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum Code {
			Nop = 0,
			Break = 1,
			Ldarg_0 = 2,
			Ldarg_1 = 3,
			Ldarg_2 = 4,
			Ldarg_3 = 5,
			Ldloc_0 = 6,
			Ldloc_1 = 7,
			Ldloc_2 = 8,
			Ldloc_3 = 9,
			Stloc_0 = 10,
			Stloc_1 = 11,
			Stloc_2 = 12,
			Stloc_3 = 13,
			Ldarg_S = 14,
			Ldarga_S = 15,
			Starg_S = 16,
			Ldloc_S = 17,
			Ldloca_S = 18,
			Stloc_S = 19,
			Ldnull = 20,
			Ldc_I4_M1 = 21,
			Ldc_I4_0 = 22,
			Ldc_I4_1 = 23,
			Ldc_I4_2 = 24,
			Ldc_I4_3 = 25,
			Ldc_I4_4 = 26,
			Ldc_I4_5 = 27,
			Ldc_I4_6 = 28,
			Ldc_I4_7 = 29,
			Ldc_I4_8 = 30,
			Ldc_I4_S = 31,
			Ldc_I4 = 32,
			Ldc_I8 = 33,
			Ldc_R4 = 34,
			Ldc_R8 = 35,
			Dup = 36,
			Pop = 37,
			Jmp = 38,
			Call = 39,
			Calli = 40,
			Ret = 41,
			Br_S = 42,
			Brfalse_S = 43,
			Brtrue_S = 44,
			Beq_S = 45,
			Bge_S = 46,
			Bgt_S = 47,
			Ble_S = 48,
			Blt_S = 49,
			Bne_Un_S = 50,
			Bge_Un_S = 51,
			Bgt_Un_S = 52,
			Ble_Un_S = 53,
			Blt_Un_S = 54,
			Br = 55,
			Brfalse = 56,
			Brtrue = 57,
			Beq = 58,
			Bge = 59,
			Bgt = 60,
			Ble = 61,
			Blt = 62,
			Bne_Un = 63,
			Bge_Un = 64,
			Bgt_Un = 65,
			Ble_Un = 66,
			Blt_Un = 67,
			Switch = 68,
			Ldind_I1 = 69,
			Ldind_U1 = 70,
			Ldind_I2 = 71,
			Ldind_U2 = 72,
			Ldind_I4 = 73,
			Ldind_U4 = 74,
			Ldind_I8 = 75,
			Ldind_I = 76,
			Ldind_R4 = 77,
			Ldind_R8 = 78,
			Ldind_Ref = 79,
			Stind_Ref = 80,
			Stind_I1 = 81,
			Stind_I2 = 82,
			Stind_I4 = 83,
			Stind_I8 = 84,
			Stind_R4 = 85,
			Stind_R8 = 86,
			Add = 87,
			Sub = 88,
			Mul = 89,
			Div = 90,
			Div_Un = 91,
			Rem = 92,
			Rem_Un = 93,
			And = 94,
			Or = 95,
			Xor = 96,
			Shl = 97,
			Shr = 98,
			Shr_Un = 99,
			Neg = 100,
			Not = 101,
			Conv_I1 = 102,
			Conv_I2 = 103,
			Conv_I4 = 104,
			Conv_I8 = 105,
			Conv_R4 = 106,
			Conv_R8 = 107,
			Conv_U4 = 108,
			Conv_U8 = 109,
			Callvirt = 110,
			Cpobj = 111,
			Ldobj = 112,
			Ldstr = 113,
			Newobj = 114,
			Castclass = 115,
			Isinst = 116,
			Conv_R_Un = 117,
			Unbox = 118,
			Throw = 119,
			Ldfld = 120,
			Ldflda = 121,
			Stfld = 122,
			Ldsfld = 123,
			Ldsflda = 124,
			Stsfld = 125,
			Stobj = 126,
			Conv_Ovf_I1_Un = 127,
			Conv_Ovf_I2_Un = 128,
			Conv_Ovf_I4_Un = 129,
			Conv_Ovf_I8_Un = 130,
			Conv_Ovf_U1_Un = 131,
			Conv_Ovf_U2_Un = 132,
			Conv_Ovf_U4_Un = 133,
			Conv_Ovf_U8_Un = 134,
			Conv_Ovf_I_Un = 135,
			Conv_Ovf_U_Un = 136,
			Box = 137,
			Newarr = 138,
			Ldlen = 139,
			Ldelema = 140,
			Ldelem_I1 = 141,
			Ldelem_U1 = 142,
			Ldelem_I2 = 143,
			Ldelem_U2 = 144,
			Ldelem_I4 = 145,
			Ldelem_U4 = 146,
			Ldelem_I8 = 147,
			Ldelem_I = 148,
			Ldelem_R4 = 149,
			Ldelem_R8 = 150,
			Ldelem_Ref = 151,
			Stelem_I = 152,
			Stelem_I1 = 153,
			Stelem_I2 = 154,
			Stelem_I4 = 155,
			Stelem_I8 = 156,
			Stelem_R4 = 157,
			Stelem_R8 = 158,
			Stelem_Ref = 159,
			Ldelem_Any = 160,
			Stelem_Any = 161,
			Unbox_Any = 162,
			Conv_Ovf_I1 = 163,
			Conv_Ovf_U1 = 164,
			Conv_Ovf_I2 = 165,
			Conv_Ovf_U2 = 166,
			Conv_Ovf_I4 = 167,
			Conv_Ovf_U4 = 168,
			Conv_Ovf_I8 = 169,
			Conv_Ovf_U8 = 170,
			Refanyval = 171,
			Ckfinite = 172,
			Mkrefany = 173,
			Ldtoken = 174,
			Conv_U2 = 175,
			Conv_U1 = 176,
			Conv_I = 177,
			Conv_Ovf_I = 178,
			Conv_Ovf_U = 179,
			Add_Ovf = 180,
			Add_Ovf_Un = 181,
			Mul_Ovf = 182,
			Mul_Ovf_Un = 183,
			Sub_Ovf = 184,
			Sub_Ovf_Un = 185,
			Endfinally = 186,
			Leave = 187,
			Leave_S = 188,
			Stind_I = 189,
			Conv_U = 190,
			Arglist = 191,
			Ceq = 192,
			Cgt = 193,
			Cgt_Un = 194,
			Clt = 195,
			Clt_Un = 196,
			Ldftn = 197,
			Ldvirtftn = 198,
			Ldarg = 199,
			Ldarga = 200,
			Starg = 201,
			Ldloc = 202,
			Ldloca = 203,
			Stloc = 204,
			Localloc = 205,
			Endfilter = 206,
			Unaligned = 207,
			Volatile = 208,
			Tail = 209,
			Initobj = 210,
			Constrained = 211,
			Cpblk = 212,
			Initblk = 213,
			No = 214,
			Rethrow = 215,
			Sizeof = 216,
			Refanytype = 217,
			Readonly = 218,
		}
		class ConstantDebugInformation extends Mono.Cecil.Cil.DebugInformation {
			Name: string;
			ConstantType: any;
			Value: any;
			 constructor(name: string, constant_type: any, value: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		abstract class CustomDebugInformation extends Mono.Cecil.Cil.DebugInformation {
			Identifier: any;
			Kind: any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum CustomDebugInformationKind {
			Binary = 0,
			StateMachineScope = 1,
			DynamicVariable = 2,
			DefaultNamespace = 3,
			AsyncMethodBody = 4,
			EmbeddedSource = 5,
			SourceLink = 6,
		}
		abstract class DebugInformation {
			MetadataToken: any;
			HasCustomDebugInformations: boolean;
			CustomDebugInformations: any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class DefaultSymbolReaderProvider {
			 constructor() ;
			 constructor(throwIfNoSymbol: boolean) ;
			 GetSymbolReader(module: any, fileName: string) : any;
			 GetSymbolReader(module: any, symbolStream: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class DefaultSymbolWriterProvider {
			 constructor() ;
			 GetSymbolWriter(module: any, fileName: string) : any;
			 GetSymbolWriter(module: any, symbolStream: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class Document extends Mono.Cecil.Cil.DebugInformation {
			Url: string;
			Type: any;
			TypeGuid: any;
			HashAlgorithm: any;
			HashAlgorithmGuid: any;
			Language: any;
			LanguageGuid: any;
			LanguageVendor: any;
			LanguageVendorGuid: any;
			Hash: any;
			EmbeddedSource: any;
			 constructor(url: string) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum DocumentHashAlgorithm {
			None = 0,
			MD5 = 1,
			SHA1 = 2,
			SHA256 = 3,
		}
		enum DocumentLanguage {
			Other = 0,
			C = 1,
			Cpp = 2,
			CSharp = 3,
			Basic = 4,
			Java = 5,
			Cobol = 6,
			Pascal = 7,
			Cil = 8,
			JScript = 9,
			Smc = 10,
			MCpp = 11,
			FSharp = 12,
		}
		enum DocumentLanguageVendor {
			Other = 0,
			Microsoft = 1,
		}
		enum DocumentType {
			Other = 0,
			Text = 1,
		}
		class EmbeddedPortablePdbReader {
			 GetWriterProvider() : any;
			 ProcessDebugHeader(header: any) : boolean;
			 Read(method: any) : any;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class EmbeddedPortablePdbReaderProvider {
			 constructor() ;
			 GetSymbolReader(module: any, fileName: string) : any;
			 GetSymbolReader(module: any, symbolStream: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class EmbeddedPortablePdbWriter {
			 GetReaderProvider() : any;
			 GetDebugHeader() : any;
			 Write(info: any) : void;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class EmbeddedPortablePdbWriterProvider {
			 constructor() ;
			 GetSymbolWriter(module: any, fileName: string) : any;
			 GetSymbolWriter(module: any, symbolStream: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class EmbeddedSourceDebugInformation extends Mono.Cecil.Cil.CustomDebugInformation {
			Content: any;
			Compress: boolean;
			Kind: any;
			 constructor(content: any, compress: boolean) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ExceptionHandler {
			TryStart: any;
			TryEnd: any;
			FilterStart: any;
			HandlerStart: any;
			HandlerEnd: any;
			CatchType: any;
			HandlerType: any;
			 constructor(handlerType: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum ExceptionHandlerType {
			Catch = 0,
			Filter = 1,
			Finally = 2,
			Fault = 4,
		}
		enum FlowControl {
			Branch = 0,
			Break = 1,
			Call = 2,
			Cond_Branch = 3,
			Meta = 4,
			Next = 5,
			Phi = 6,
			Return = 7,
			Throw = 8,
		}
		interface ICustomDebugInformationProvider {
			HasCustomDebugInformations: boolean;
			CustomDebugInformations: any;
		}
		class ILProcessor {
			Body: any;
			 Create(opcode: any) : any;
			 Create(opcode: any, type: any) : any;
			 Create(opcode: any, site: any) : any;
			 Create(opcode: any, method: any) : any;
			 Create(opcode: any, field: any) : any;
			 Create(opcode: any, value: string) : any;
			 Create(opcode: any, value: any) : any;
			 Create(opcode: any, value: any) : any;
			 Create(opcode: any, value: number) : any;
			 Create(opcode: any, value: number) : any;
			 Create(opcode: any, value: number) : any;
			 Create(opcode: any, value: any) : any;
			 Create(opcode: any, target: any) : any;
			 Create(opcode: any, targets: any) : any;
			 Create(opcode: any, variable: any) : any;
			 Create(opcode: any, parameter: any) : any;
			 Emit(opcode: any) : void;
			 Emit(opcode: any, type: any) : void;
			 Emit(opcode: any, method: any) : void;
			 Emit(opcode: any, site: any) : void;
			 Emit(opcode: any, field: any) : void;
			 Emit(opcode: any, value: string) : void;
			 Emit(opcode: any, value: any) : void;
			 Emit(opcode: any, value: any) : void;
			 Emit(opcode: any, value: number) : void;
			 Emit(opcode: any, value: number) : void;
			 Emit(opcode: any, value: number) : void;
			 Emit(opcode: any, value: any) : void;
			 Emit(opcode: any, target: any) : void;
			 Emit(opcode: any, targets: any) : void;
			 Emit(opcode: any, variable: any) : void;
			 Emit(opcode: any, parameter: any) : void;
			 InsertBefore(target: any, instruction: any) : void;
			 InsertAfter(target: any, instruction: any) : void;
			 InsertAfter(index: number, instruction: any) : void;
			 Append(instruction: any) : void;
			 Replace(target: any, instruction: any) : void;
			 Replace(index: number, instruction: any) : void;
			 Remove(instruction: any) : void;
			 RemoveAt(index: number) : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ImageDebugDirectory extends System.ValueType {
			Characteristics: number;
			TimeDateStamp: number;
			MajorVersion: number;
			MinorVersion: number;
			Type: any;
			SizeOfData: number;
			AddressOfRawData: number;
			PointerToRawData: number;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 ToString() : string;
			 GetType() : any;
		}
		class ImageDebugHeader {
			HasEntries: boolean;
			Entries: any;
			 constructor(entries: any) ;
			 constructor() ;
			 constructor(entry: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ImageDebugHeaderEntry {
			Directory: any;
			Data: any;
			 constructor(directory: any, data: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum ImageDebugType {
			CodeView = 2,
			Deterministic = 16,
			EmbeddedPortablePdb = 17,
		}
		class ImportDebugInformation extends Mono.Cecil.Cil.DebugInformation {
			HasTargets: boolean;
			Targets: any;
			Parent: any;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ImportTarget {
			Namespace: string;
			Type: any;
			AssemblyReference: any;
			Alias: string;
			Kind: any;
			 constructor(kind: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum ImportTargetKind {
			ImportNamespace = 1,
			ImportNamespaceInAssembly = 2,
			ImportType = 3,
			ImportXmlNamespaceWithAlias = 4,
			ImportAlias = 5,
			DefineAssemblyAlias = 6,
			DefineNamespaceAlias = 7,
			DefineNamespaceInAssemblyAlias = 8,
			DefineTypeAlias = 9,
		}
		class Instruction {
			Offset: number;
			OpCode: any;
			Operand: any;
			Previous: any;
			Next: any;
			 GetSize() : number;
			 ToString() : string;
			 static Create(opcode: any) : any;
			 static Create(opcode: any, type: any) : any;
			 static Create(opcode: any, site: any) : any;
			 static Create(opcode: any, method: any) : any;
			 static Create(opcode: any, field: any) : any;
			 static Create(opcode: any, value: string) : any;
			 static Create(opcode: any, value: any) : any;
			 static Create(opcode: any, value: any) : any;
			 static Create(opcode: any, value: number) : any;
			 static Create(opcode: any, value: number) : any;
			 static Create(opcode: any, value: number) : any;
			 static Create(opcode: any, value: any) : any;
			 static Create(opcode: any, target: any) : any;
			 static Create(opcode: any, targets: any) : any;
			 static Create(opcode: any, variable: any) : any;
			 static Create(opcode: any, parameter: any) : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class InstructionOffset extends System.ValueType {
			Offset: number;
			IsEndOfMethod: boolean;
			 constructor(instruction: any) ;
			 constructor(offset: number) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 ToString() : string;
			 GetType() : any;
		}
		interface ISymbolReader {
			 GetWriterProvider() : any;
			 ProcessDebugHeader(header: any) : boolean;
			 Read(method: any) : any;
		}
		interface ISymbolReaderProvider {
			 GetSymbolReader(module: any, fileName: string) : any;
			 GetSymbolReader(module: any, symbolStream: any) : any;
		}
		interface ISymbolWriter {
			 GetReaderProvider() : any;
			 GetDebugHeader() : any;
			 Write(info: any) : void;
		}
		interface ISymbolWriterProvider {
			 GetSymbolWriter(module: any, fileName: string) : any;
			 GetSymbolWriter(module: any, symbolStream: any) : any;
		}
		class MethodBody {
			Method: any;
			MaxStackSize: number;
			CodeSize: number;
			InitLocals: boolean;
			LocalVarToken: any;
			Instructions: any;
			HasExceptionHandlers: boolean;
			ExceptionHandlers: any;
			HasVariables: boolean;
			Variables: any;
			ThisParameter: any;
			 constructor(method: any) ;
			 GetILProcessor() : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class MethodDebugInformation extends Mono.Cecil.Cil.DebugInformation {
			Method: any;
			HasSequencePoints: boolean;
			SequencePoints: any;
			Scope: any;
			StateMachineKickOffMethod: any;
			 GetSequencePoint(instruction: any) : any;
			 GetSequencePointMapping() : any;
			 GetScopes() : any;
			 TryGetName(variable: any, name: any) : boolean;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class OpCode extends System.ValueType {
			Name: string;
			Size: number;
			Op1: any;
			Op2: any;
			Value: number;
			Code: any;
			FlowControl: any;
			OpCodeType: any;
			OperandType: any;
			StackBehaviourPop: any;
			StackBehaviourPush: any;
			 GetHashCode() : number;
			 Equals(obj: any) : boolean;
			 Equals(opcode: any) : boolean;
			 static op_Equality(one: any, other: any) : boolean;
			 static op_Inequality(one: any, other: any) : boolean;
			 ToString() : string;
			 GetType() : any;
		}
		abstract class OpCodes {
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
		enum OpCodeType {
			Annotation = 0,
			Macro = 1,
			Nternal = 2,
			Objmodel = 3,
			Prefix = 4,
			Primitive = 5,
		}
		enum OperandType {
			InlineBrTarget = 0,
			InlineField = 1,
			InlineI = 2,
			InlineI8 = 3,
			InlineMethod = 4,
			InlineNone = 5,
			InlinePhi = 6,
			InlineR = 7,
			InlineSig = 8,
			InlineString = 9,
			InlineSwitch = 10,
			InlineTok = 11,
			InlineType = 12,
			InlineVar = 13,
			InlineArg = 14,
			ShortInlineBrTarget = 15,
			ShortInlineI = 16,
			ShortInlineR = 17,
			ShortInlineVar = 18,
			ShortInlineArg = 19,
		}
		class PortablePdbReader {
			 GetWriterProvider() : any;
			 ProcessDebugHeader(header: any) : boolean;
			 Read(method: any) : any;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class PortablePdbReaderProvider {
			 constructor() ;
			 GetSymbolReader(module: any, fileName: string) : any;
			 GetSymbolReader(module: any, symbolStream: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class PortablePdbWriter {
			 GetReaderProvider() : any;
			 GetDebugHeader() : any;
			 Write(info: any) : void;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class PortablePdbWriterProvider {
			 constructor() ;
			 GetSymbolWriter(module: any, fileName: string) : any;
			 GetSymbolWriter(module: any, symbolStream: any) : any;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ScopeDebugInformation extends Mono.Cecil.Cil.DebugInformation {
			Start: any;
			End: any;
			Import: any;
			HasScopes: boolean;
			Scopes: any;
			HasVariables: boolean;
			Variables: any;
			HasConstants: boolean;
			Constants: any;
			 constructor(start: any, end: any) ;
			 TryGetName(variable: any, name: any) : boolean;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class SequencePoint {
			Offset: number;
			StartLine: number;
			StartColumn: number;
			EndLine: number;
			EndColumn: number;
			IsHidden: boolean;
			Document: any;
			 constructor(instruction: any, document: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class SourceLinkDebugInformation extends Mono.Cecil.Cil.CustomDebugInformation {
			Content: string;
			Kind: any;
			 constructor(content: string) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		enum StackBehaviour {
			Pop0 = 0,
			Pop1 = 1,
			Pop1_pop1 = 2,
			Popi = 3,
			Popi_pop1 = 4,
			Popi_popi = 5,
			Popi_popi8 = 6,
			Popi_popi_popi = 7,
			Popi_popr4 = 8,
			Popi_popr8 = 9,
			Popref = 10,
			Popref_pop1 = 11,
			Popref_popi = 12,
			Popref_popi_popi = 13,
			Popref_popi_popi8 = 14,
			Popref_popi_popr4 = 15,
			Popref_popi_popr8 = 16,
			Popref_popi_popref = 17,
			PopAll = 18,
			Push0 = 19,
			Push1 = 20,
			Push1_push1 = 21,
			Pushi = 22,
			Pushi8 = 23,
			Pushr4 = 24,
			Pushr8 = 25,
			Pushref = 26,
			Varpop = 27,
			Varpush = 28,
		}
		class StateMachineScope {
			Start: any;
			End: any;
			 constructor(start: any, end: any) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class StateMachineScopeDebugInformation extends Mono.Cecil.Cil.CustomDebugInformation {
			Scopes: any;
			Kind: any;
			 constructor() ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class SymbolsNotFoundException extends System.IO.FileNotFoundException {
			 constructor(message: string) ;
			 ToString() : string;
			 GetObjectData(info: any, context: any) : void;
			 GetBaseException() : any;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class SymbolsNotMatchingException extends System.InvalidOperationException {
			 constructor(message: string) ;
			 GetBaseException() : any;
			 GetObjectData(info: any, context: any) : void;
			 ToString() : string;
			 GetType() : any;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		/** Flags */
		enum VariableAttributes {
			None = 0,
			DebuggerHidden = 1,
		}
		class VariableDebugInformation extends Mono.Cecil.Cil.DebugInformation {
			Index: number;
			Name: string;
			Attributes: any;
			IsDebuggerHidden: boolean;
			 constructor(variable: any, name: string) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class VariableDefinition extends Mono.Cecil.Cil.VariableReference {
			IsPinned: boolean;
			 constructor(variableType: any) ;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class VariableIndex extends System.ValueType {
			Index: number;
			 constructor(variable: any) ;
			 constructor(index: number) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 ToString() : string;
			 GetType() : any;
		}
		abstract class VariableReference {
			VariableType: any;
			Index: number;
			 Resolve() : any;
			 ToString() : string;
			 GetType() : any;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
	}
	module MonoMod {
		enum DebugSymbolFormat {
			Auto = 0,
			MDB = 1,
			PDB = 2,
		}
		class MethodBodyRewriter extends System.MulticastDelegate {
			 constructor(object: any, method: any) ;
			 Invoke(modder: any, body: any, instr: any, instri: number) : void;
			 BeginInvoke(modder: any, body: any, instr: any, instri: number, callback: any, object: any) : any;
			 EndInvoke(result: any) : void;
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		class MethodParser extends System.MulticastDelegate {
			 constructor(object: any, method: any) ;
			 Invoke(modder: any, body: any, instr: any, instri: any) : boolean;
			 BeginInvoke(modder: any, body: any, instr: any, instri: any, callback: any, object: any) : any;
			 EndInvoke(instri: any, result: any) : boolean;
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		class MethodRewriter extends System.MulticastDelegate {
			 constructor(object: any, method: any) ;
			 Invoke(modder: any, method: any) : void;
			 BeginInvoke(modder: any, method: any, callback: any, object: any) : any;
			 EndInvoke(result: any) : void;
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		class MissingDependencyResolver extends System.MulticastDelegate {
			 constructor(object: any, method: any) ;
			 Invoke(modder: any, main: any, name: string, fullName: string) : any;
			 BeginInvoke(modder: any, main: any, name: string, fullName: string, callback: any, object: any) : any;
			 EndInvoke(result: any) : any;
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		class ModReadEventHandler extends System.MulticastDelegate {
			 constructor(object: any, method: any) ;
			 Invoke(modder: any, mod: any) : void;
			 BeginInvoke(modder: any, mod: any, callback: any, object: any) : any;
			 EndInvoke(result: any) : void;
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModAdded extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModConstructor extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModCustomAttributeAttribute extends System.Attribute {
			 constructor(h: string) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModCustomMethodAttributeAttribute extends System.Attribute {
			 constructor(h: string) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModder {
			SharedData: any;
			RelinkMap: any;
			RelinkModuleMap: any;
			SkipList: any;
			RelinkMapCache: any;
			RelinkModuleMapCache: any;
			ForceCallMap: any;
			OnReadMod: any;
			PostProcessors: any;
			CustomAttributeHandlers: any;
			CustomMethodAttributeHandlers: any;
			MissingDependencyResolver: any;
			MethodParser: any;
			MethodRewriter: any;
			MethodBodyRewriter: any;
			Input: any;
			InputPath: string;
			Output: any;
			OutputPath: string;
			DependencyDirs: any;
			Module: any;
			DependencyMap: any;
			DependencyCache: any;
			ShouldCleanupAttrib: any;
			LogVerboseEnabled: boolean;
			CleanupEnabled: boolean;
			PublicEverything: boolean;
			Mods: any;
			Strict: boolean;
			MissingDependencyThrow: boolean;
			RemovePatchReferences: boolean;
			PreventInline: boolean;
			UpgradeMSCORLIB: any;
			ReadingMode: any;
			DebugSymbolOutputFormat: any;
			CurrentRID: number;
			AssemblyResolver: any;
			ReaderParameters: any;
			WriterParameters: any;
			GACPaths: string[];
			 constructor() ;
			 ClearCaches(all?: boolean, shareable?: boolean, moduleSpecific?: boolean) : void;
			 Dispose() : void;
			 Log(value: any) : void;
			 Log(text: string) : void;
			 LogVerbose(value: any) : void;
			 LogVerbose(text: string) : void;
			 Read() : void;
			 MapDependencies() : void;
			 MapDependencies(main: any) : void;
			 MapDependency(main: any, depRef: any) : void;
			 MapDependency(main: any, name: string, fullName?: string, depRef?: any) : void;
			 DefaultMissingDependencyResolver(mod: any, main: any, name: string, fullName: string) : any;
			 Write(output?: any, outputPath?: string) : void;
			 GenReaderParameters(mainModule: boolean, path?: string) : any;
			 ReadMod(path: string) : void;
			 ReadMod(stream: any) : void;
			 ParseRules(mod: any) : void;
			 ParseRulesInType(type: any, rulesTypeMMILRT?: any) : void;
			 ParseLinkFrom(target: any, hook: any) : void;
			 ParseLinkTo(from: any, hook: any) : void;
			 RunCustomAttributeHandlers(cap: any) : void;
			 AutoPatch() : void;
			 Relinker(mtp: any, context: any) : any;
			 MainRelinker(mtp: any, context: any) : any;
			 PostRelinker(mtp: any, context: any) : any;
			 ResolveRelinkTarget(mtp: any, relink?: boolean, relinkModule?: boolean) : any;
			 DefaultParser(mod: any, body: any, instr: any, instri: any) : boolean;
			 FindType(name: string) : any;
			 FindType(name: string, runtimeName: boolean) : any;
			 FindTypeDeep(name: string) : any;
			 PrePatchModule(mod: any) : void;
			 PrePatchType(type: any, forceAdd?: boolean) : void;
			 PatchModule(mod: any) : void;
			 PatchType(type: any) : void;
			 PatchProperty(targetType: any, prop: any, propMethods?: any) : void;
			 PatchEvent(targetType: any, srcEvent: any, propMethods?: any) : void;
			 PatchField(targetType: any, field: any) : void;
			 PatchMethod(targetType: any, method: any) : any;
			 PatchRefs() : void;
			 PatchRefs(mod: any) : void;
			 PatchRefsInType(type: any) : void;
			 PatchRefsInMethod(method: any) : void;
			 Cleanup(all?: boolean) : void;
			 CleanupType(type: any, all?: boolean) : void;
			 Cleanup(cap: any, all?: boolean) : void;
			 DefaultPostProcessor(modder: any) : void;
			 DefaultPostProcessType(type: any) : void;
			 PatchWasHere() : any;
			 GetMonoModOriginalCtor() : any;
			 GetMonoModOriginalNameCtor() : any;
			 GetMonoModAddedCtor() : any;
			 GetMonoModPatchCtor() : any;
			 GetMetadataToken(type: any) : any;
			 AllowedSpecialName(method: any, targetType?: any) : boolean;
			 MatchingConditionals(cap: any, module: any) : boolean;
			 MatchingConditionals(cap: any, asmName?: any) : boolean;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class MonoModEnumReplace extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModForceCall extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModForceCallvirt extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModHook extends System.Attribute {
			FindableID: string;
			Type: any;
			 constructor(findableID: string) ;
			 constructor(type: any) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModIfFlag extends System.Attribute {
			 constructor(key: string) ;
			 constructor(key: string, fallback: boolean) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModIgnore extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModLinkFrom extends System.Attribute {
			FindableID: string;
			Type: any;
			 constructor(findableID: string) ;
			 constructor(type: any) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModLinkTo extends System.Attribute {
			 constructor(t: string) ;
			 constructor(t: any) ;
			 constructor(t: string, n: string) ;
			 constructor(t: any, n: string) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModNoNew extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModOnPlatform extends System.Attribute {
			 constructor(p: any) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModOriginal extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModOriginalName extends System.Attribute {
			 constructor(n: string) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModPatch extends System.Attribute {
			 constructor(name: string) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModPublic extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModRemove extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModReplace extends System.Attribute {
			 constructor() ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		class MonoModTargetModule extends System.Attribute {
			 constructor(name: string) ;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
			 Match(obj: any) : boolean;
			 IsDefaultAttribute() : boolean;
			 GetType() : any;
			 ToString() : string;
		}
		abstract class PatcherExtensions {
			 static SetPublic(mtp: any, p: boolean) : void;
			 static SetPublic(o: any, p: boolean) : void;
			 static SetPublic(o: any, p: boolean) : void;
			 static SetPublic(o: any, p: boolean) : void;
			 static SetPublic(o: any, p: boolean) : void;
			 static SetPublic(o: any, p: boolean) : void;
			 static GetOriginalName(method: any) : string;
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
		class PostProcessor extends System.MulticastDelegate {
			 constructor(object: any, method: any) ;
			 Invoke(modder: any) : void;
			 BeginInvoke(modder: any, callback: any, object: any) : any;
			 EndInvoke(result: any) : void;
			 GetObjectData(info: any, context: any) : void;
			 Equals(obj: any) : boolean;
			 GetInvocationList() : any;
			 GetHashCode() : number;
			 Clone() : any;
			 DynamicInvoke(...args: any) : any;
			 GetType() : any;
			 ToString() : string;
		}
		class RelinkMapEntry {
			Type: string;
			FindableID: string;
			 constructor() ;
			 constructor(type: string, findableID: string) ;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
	}
	module MonoMod.InlineRT {
		abstract class MonoModRule {
			 static RelinkModule(from: string, toName: string) : void;
			 static RelinkType(from: string, to: string) : void;
			 static RelinkMember(from: string, toType: string, toMember: string) : void;
			 static Patch(id: string, patch: boolean) : void;
			 static RegisterCustomAttribute(attribName: string, handlerName: string) : void;
			 static RegisterCustomMethodAttribute(attribName: string, handlerName: string) : void;
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
		abstract class MonoModRulesManager {
			 static Register(self: any) : void;
			 static GetId(self: any) : number;
			 static GetModder(asmName: string) : any;
			 static ExecuteRules(self: any, orig: any) : any;
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
	}
	module System.Net.Http {
		class HttpClient extends System.Net.Http.HttpMessageInvoker {
			DefaultRequestHeaders: any;
			DefaultRequestVersion: any;
			BaseAddress: any;
			Timeout: any;
			MaxResponseContentBufferSize: number;
			 constructor() ;
			 constructor(handler: any) ;
			 constructor(handler: any, disposeHandler: boolean) ;
			 GetStringAsync(requestUri: string) : any;
			 GetStringAsync(requestUri: any) : any;
			 GetStringAsync(requestUri: string, cancellationToken: any) : any;
			 GetStringAsync(requestUri: any, cancellationToken: any) : any;
			 GetByteArrayAsync(requestUri: string) : any;
			 GetByteArrayAsync(requestUri: any) : any;
			 GetByteArrayAsync(requestUri: string, cancellationToken: any) : any;
			 GetByteArrayAsync(requestUri: any, cancellationToken: any) : any;
			 GetStreamAsync(requestUri: string) : any;
			 GetStreamAsync(requestUri: string, cancellationToken: any) : any;
			 GetStreamAsync(requestUri: any) : any;
			 GetStreamAsync(requestUri: any, cancellationToken: any) : any;
			 GetAsync(requestUri: string) : any;
			 GetAsync(requestUri: any) : any;
			 GetAsync(requestUri: string, completionOption: any) : any;
			 GetAsync(requestUri: any, completionOption: any) : any;
			 GetAsync(requestUri: string, cancellationToken: any) : any;
			 GetAsync(requestUri: any, cancellationToken: any) : any;
			 GetAsync(requestUri: string, completionOption: any, cancellationToken: any) : any;
			 GetAsync(requestUri: any, completionOption: any, cancellationToken: any) : any;
			 PostAsync(requestUri: string, content: any) : any;
			 PostAsync(requestUri: any, content: any) : any;
			 PostAsync(requestUri: string, content: any, cancellationToken: any) : any;
			 PostAsync(requestUri: any, content: any, cancellationToken: any) : any;
			 PutAsync(requestUri: string, content: any) : any;
			 PutAsync(requestUri: any, content: any) : any;
			 PutAsync(requestUri: string, content: any, cancellationToken: any) : any;
			 PutAsync(requestUri: any, content: any, cancellationToken: any) : any;
			 PatchAsync(requestUri: string, content: any) : any;
			 PatchAsync(requestUri: any, content: any) : any;
			 PatchAsync(requestUri: string, content: any, cancellationToken: any) : any;
			 PatchAsync(requestUri: any, content: any, cancellationToken: any) : any;
			 DeleteAsync(requestUri: string) : any;
			 DeleteAsync(requestUri: any) : any;
			 DeleteAsync(requestUri: string, cancellationToken: any) : any;
			 DeleteAsync(requestUri: any, cancellationToken: any) : any;
			 SendAsync(request: any) : any;
			 SendAsync(request: any, cancellationToken: any) : any;
			 SendAsync(request: any, completionOption: any) : any;
			 SendAsync(request: any, completionOption: any, cancellationToken: any) : any;
			 CancelPendingRequests() : void;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class HttpMessageInvoker {
			 constructor(handler: any) ;
			 constructor(handler: any, disposeHandler: boolean) ;
			 SendAsync(request: any, cancellationToken: any) : any;
			 Dispose() : void;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
	}
	module System.IO.Compression {
		abstract class ZipFile {
			 static OpenRead(archiveFileName: string) : any;
			 static Open(archiveFileName: string, mode: any) : any;
			 static Open(archiveFileName: string, mode: any, entryNameEncoding: any) : any;
			 static CreateFromDirectory(sourceDirectoryName: string, destinationArchiveFileName: string) : void;
			 static CreateFromDirectory(sourceDirectoryName: string, destinationArchiveFileName: string, compressionLevel: any, includeBaseDirectory: boolean) : void;
			 static CreateFromDirectory(sourceDirectoryName: string, destinationArchiveFileName: string, compressionLevel: any, includeBaseDirectory: boolean, entryNameEncoding: any) : void;
			 static ExtractToDirectory(sourceArchiveFileName: string, destinationDirectoryName: string) : void;
			 static ExtractToDirectory(sourceArchiveFileName: string, destinationDirectoryName: string, overwriteFiles: boolean) : void;
			 static ExtractToDirectory(sourceArchiveFileName: string, destinationDirectoryName: string, entryNameEncoding: any) : void;
			 static ExtractToDirectory(sourceArchiveFileName: string, destinationDirectoryName: string, entryNameEncoding: any, overwriteFiles: boolean) : void;
			 static GetType() : any;
			 static ToString() : string;
			 static Equals(obj: any) : boolean;
			 static GetHashCode() : number;
		}
	}
	module Mono.Cecil.Js {
		class JsModder extends MonoMod.MonoModder {
			DefaultAssemblyResolver: any;
			 constructor() ;
			 ClearCaches(all?: boolean, shareable?: boolean, moduleSpecific?: boolean) : void;
			 Dispose() : void;
			 Log(value: any) : void;
			 Log(text: string) : void;
			 LogVerbose(value: any) : void;
			 LogVerbose(text: string) : void;
			 Read() : void;
			 MapDependencies() : void;
			 MapDependencies(main: any) : void;
			 MapDependency(main: any, depRef: any) : void;
			 MapDependency(main: any, name: string, fullName?: string, depRef?: any) : void;
			 DefaultMissingDependencyResolver(mod: any, main: any, name: string, fullName: string) : any;
			 Write(output?: any, outputPath?: string) : void;
			 GenReaderParameters(mainModule: boolean, path?: string) : any;
			 ReadMod(path: string) : void;
			 ReadMod(stream: any) : void;
			 ParseRules(mod: any) : void;
			 ParseRulesInType(type: any, rulesTypeMMILRT?: any) : void;
			 ParseLinkFrom(target: any, hook: any) : void;
			 ParseLinkTo(from: any, hook: any) : void;
			 RunCustomAttributeHandlers(cap: any) : void;
			 AutoPatch() : void;
			 Relinker(mtp: any, context: any) : any;
			 MainRelinker(mtp: any, context: any) : any;
			 PostRelinker(mtp: any, context: any) : any;
			 ResolveRelinkTarget(mtp: any, relink?: boolean, relinkModule?: boolean) : any;
			 DefaultParser(mod: any, body: any, instr: any, instri: any) : boolean;
			 FindType(name: string) : any;
			 FindType(name: string, runtimeName: boolean) : any;
			 FindTypeDeep(name: string) : any;
			 PrePatchModule(mod: any) : void;
			 PrePatchType(type: any, forceAdd?: boolean) : void;
			 PatchModule(mod: any) : void;
			 PatchType(type: any) : void;
			 PatchProperty(targetType: any, prop: any, propMethods?: any) : void;
			 PatchEvent(targetType: any, srcEvent: any, propMethods?: any) : void;
			 PatchField(targetType: any, field: any) : void;
			 PatchMethod(targetType: any, method: any) : any;
			 PatchRefs() : void;
			 PatchRefs(mod: any) : void;
			 PatchRefsInType(type: any) : void;
			 PatchRefsInMethod(method: any) : void;
			 Cleanup(all?: boolean) : void;
			 CleanupType(type: any, all?: boolean) : void;
			 Cleanup(cap: any, all?: boolean) : void;
			 DefaultPostProcessor(modder: any) : void;
			 DefaultPostProcessType(type: any) : void;
			 PatchWasHere() : any;
			 GetMonoModOriginalCtor() : any;
			 GetMonoModOriginalNameCtor() : any;
			 GetMonoModAddedCtor() : any;
			 GetMonoModPatchCtor() : any;
			 GetMetadataToken(type: any) : any;
			 AllowedSpecialName(method: any, targetType?: any) : boolean;
			 MatchingConditionals(cap: any, module: any) : boolean;
			 MatchingConditionals(cap: any, asmName?: any) : boolean;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
		class ResourceExtractor {
			 constructor() ;
			 Extract(inputFile: string) : string;
			 GetType() : any;
			 ToString() : string;
			 Equals(obj: any) : boolean;
			 GetHashCode() : number;
		}
	}
}
